<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://cyqmimc.github.io/atom.xml" rel="self"/>
  
  <link href="https://cyqmimc.github.io/"/>
  <updated>2024-03-18T09:43:38.502Z</updated>
  <id>https://cyqmimc.github.io/</id>
  
  <author>
    <name>cyqmimc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2024/03/18/%E7%BB%99%E6%B1%9F%E8%A5%BF%E5%BB%BA%E8%AE%BE%E6%97%A0%E5%BA%9F%E5%9F%8E%E5%B8%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%A3%E4%BC%A0%E5%8F%A3%E5%8F%B7/"/>
    <id>https://cyqmimc.github.io/2024/03/18/%E7%BB%99%E6%B1%9F%E8%A5%BF%E5%BB%BA%E8%AE%BE%E6%97%A0%E5%BA%9F%E5%9F%8E%E5%B8%82%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%AE%A3%E4%BC%A0%E5%8F%A3%E5%8F%B7/</id>
    <published>2024-03-18T09:10:03.754Z</published>
    <updated>2024-03-18T09:43:38.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”"><a href="#“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”" class="headerlink" title="“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”"></a>“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”</h1><p>解释：口号以诗意的语言描述了江西的自然景观，通过“翠岭倒影碧波中”营造出一幅画面，既展示了江西的自然美，也寓意了清新与纯净；“江西梦绘绿色同”强调了对绿色发展的共同追求和梦想。最后，“无废愿景，心手相连”不仅表达了建设无废城市的共同目标，还强调了实现这一目标需要每个人心与手的结合，既是一种呼吁也是一种承诺。这样的口号更具有感召力和深远的意义，易于引起共鸣。</p><h1 id="“碧水青山绘江西，携手铸就无废梦。”"><a href="#“碧水青山绘江西，携手铸就无废梦。”" class="headerlink" title="“碧水青山绘江西，携手铸就无废梦。”"></a>“碧水青山绘江西，携手铸就无废梦。”</h1><p>解释：这个口号通过“碧水青山”明确点出了江西的自然美景，这两个词汇不仅能立即让人想到江西省丰富的自然资源，还能体现江西“绿水青山就是金山银山”的发展理念；“携手铸就无废梦”则强调了共同努力实现无废城市的目标，整个口号既富有江西特色，又明确传达了无废城市建设的理念。</p><h1 id="“碧波映翠岭，江西梦同行。心连绿意，筑梦无废境。”"><a href="#“碧波映翠岭，江西梦同行。心连绿意，筑梦无废境。”" class="headerlink" title="“碧波映翠岭，江西梦同行。心连绿意，筑梦无废境。”"></a>“碧波映翠岭，江西梦同行。心连绿意，筑梦无废境。”</h1><p>解释：”碧水映翠峰”不仅描绘了江西壮丽的自然景色，还增加了一种梦幻般的美感。”心连绿意，筑梦无废境”以更精炼的语言强调了团结一心建设无废城市的愿景。整个口号节奏感强，易于传唱，同时深含意义，有效传达了推动绿色发展和无废城市建设的信息。</p><h1 id="“江绿梦清，废退城进。”"><a href="#“江绿梦清，废退城进。”" class="headerlink" title="“江绿梦清，废退城进。”"></a>“江绿梦清，废退城进。”</h1><p>“江绿”暗指江西的绿色环境和绿色发展，“梦清”表达了对清新梦想的追求，即建设无废城市的目标；“废退城进”则寓意在推进城市发展的同时，减少废弃物的产生，向着更高的环保标准努力。整个口号简洁明了，易于记忆和传播，且富有江西省特色。</p><h1 id="“江西绿意浓，共绘无废梦。”"><a href="#“江西绿意浓，共绘无废梦。”" class="headerlink" title="“江西绿意浓，共绘无废梦。”"></a>“江西绿意浓，共绘无废梦。”</h1><p>这个口号易于口头传播，同时具有环保和地方特色的主题。通过强调“绿意”和“梦”，我们既传达了江西的自然美景，也表明了追求无废城市的理想。</p><p>征集网址：<a href="https://mp.weixin.qq.com/s/rLPU0iSdS1jlEoVZpxbI_Q">https://mp.weixin.qq.com/s/rLPU0iSdS1jlEoVZpxbI_Q</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”&quot;&gt;&lt;a href=&quot;#“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”&quot; class=&quot;headerlink&quot; title=&quot;“翠岭倒影碧波中，江西梦绘绿色同。无废愿景，心手相连。”&quot;&gt;&lt;/a&gt;“翠</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2024/03/18/3%E6%9C%8818%E6%97%A5%E9%9A%8F%E7%AC%94/"/>
    <id>https://cyqmimc.github.io/2024/03/18/3%E6%9C%8818%E6%97%A5%E9%9A%8F%E7%AC%94/</id>
    <published>2024-03-18T06:53:41.945Z</published>
    <updated>2024-03-18T06:53:41.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3月18日随笔"><a href="#3月18日随笔" class="headerlink" title="3月18日随笔"></a>3月18日随笔</h1><p>​        最近生活有点平静，说好也不好，说不好也挺平静。工作-生活，生活家庭关系有点紧张，缺少有效的沟通，有点卷，就是日子过的有点性价比不高，内耗。谁也看不上谁，得嘞，那就谁也别理谁了，可是生活还得继续，无法摆脱柴米油盐，孩子教育，亲人关系。</p><p>​        工作相对比较看得开，就是生活还没过明白。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3月18日随笔&quot;&gt;&lt;a href=&quot;#3月18日随笔&quot; class=&quot;headerlink&quot; title=&quot;3月18日随笔&quot;&gt;&lt;/a&gt;3月18日随笔&lt;/h1&gt;&lt;p&gt;​        最近生活有点平静，说好也不好，说不好也挺平静。工作-生活，生活家庭关系有点紧张，缺</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2024/03/15/%E3%80%90%E6%97%B6%E5%85%89%E8%8D%8F%E8%8B%92%EF%BC%8CAI%E4%B8%8E%E6%88%91%E5%90%8C%E8%A1%8C%E3%80%91/"/>
    <id>https://cyqmimc.github.io/2024/03/15/%E3%80%90%E6%97%B6%E5%85%89%E8%8D%8F%E8%8B%92%EF%BC%8CAI%E4%B8%8E%E6%88%91%E5%90%8C%E8%A1%8C%E3%80%91/</id>
    <published>2024-03-15T08:09:57.199Z</published>
    <updated>2024-03-18T06:25:23.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【时光荏苒，AI与我同行】"><a href="#【时光荏苒，AI与我同行】" class="headerlink" title="【时光荏苒，AI与我同行】"></a>【时光荏苒，AI与我同行】</h1><p><img src="/../images/e1d67ac1-0681-48d6-a623-2a6b2c80fc71.png" alt="e1d67ac1-0681-48d6-a623-2a6b2c80fc71"></p><h3 id="三载光阴，如白驹过隙，我与AI的故事继续编织。"><a href="#三载光阴，如白驹过隙，我与AI的故事继续编织。" class="headerlink" title="三载光阴，如白驹过隙，我与AI的故事继续编织。"></a><strong>三载光阴，如白驹过隙，我与AI的故事继续编织。</strong></h3><p>在这个信息爆炸的时代，三年或许能见证一个小生命的诞生，也足以见证科技的飞跃。自从上一次按下键盘，记录生活的片段，至今已是三个年头。今日，我重启旧梦，让文字在虚拟的世界里再次舞动，不仅仅是为了记录，更是为了分享我与AI的旅程，以及它在这个旅程中所展现出的无尽魅力。</p><h4 id="ChatGPT-4：更甚一筹的伙伴"><a href="#ChatGPT-4：更甚一筹的伙伴" class="headerlink" title="ChatGPT-4：更甚一筹的伙伴"></a><strong>ChatGPT-4：更甚一筹的伙伴</strong></h4><p>ChatGPT-4，这个名字在我心中已经不仅仅是一个代号。它像是一个旧友，随时准备着倾听我的心声，理解我的需求。这份智能所带来的不仅是效率的提升，更是对话的艺术和理解的深度。它的出现，让我看到了AI与人类沟通的新高度，也让我对未来充满了无限的想象和期待。</p><h4 id="AIGC的风起云涌：艺术与科技的融合"><a href="#AIGC的风起云涌：艺术与科技的融合" class="headerlink" title="AIGC的风起云涌：艺术与科技的融合"></a><strong>AIGC的风起云涌：艺术与科技的融合</strong></h4><p>随着时间的推移，AIGC（人工智能生成内容）的发展如同潮水般汹涌澎湃。从文字到图像，从创造到复现，每一次的进步都是对人类智慧的挑战和超越。它不仅仅改变了我们获取信息的方式，更是在重新定义创造和艺术。当AI开始拥有‘创造’的能力时，我们似乎看到了一个全新的世界正在向我们招手。</p><h4 id="未知的旅程，乐观的心"><a href="#未知的旅程，乐观的心" class="headerlink" title="未知的旅程，乐观的心"></a><strong>未知的旅程，乐观的心</strong></h4><p>尽管技术的发展让我们的生活变得更加丰富多彩，但生命的旅途依旧充满未知。这份未知既是挑战也是机遇，它让我们的生活充满了期待和惊喜。面对未知，我选择以乐观的心态去迎接，因为我相信，无论未来如何，只要我们保持着对美好生活的追求，一切终将美好。</p><h3 id="在字与句之间，我见证了AI的力量，也感受到了生活的温度。"><a href="#在字与句之间，我见证了AI的力量，也感受到了生活的温度。" class="headerlink" title="在字与句之间，我见证了AI的力量，也感受到了生活的温度。"></a><strong>在字与句之间，我见证了AI的力量，也感受到了生活的温度。</strong></h3><p>在这个充满变数的世界里，我选择用文字记录下这一刻的感悟。也许未来的某一天，当我们再次回望，会发现这些文字记录下的，不仅仅是技术的变迁，更是我们心中对美好生活的无限向往。</p><p>在未来的日子里，我将继续探索，继续梦想，带着对AI的好奇心，以及对生活的热爱，迎接每一个未知的明天。让我们一起，期待那些还未发生的奇迹。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;【时光荏苒，AI与我同行】&quot;&gt;&lt;a href=&quot;#【时光荏苒，AI与我同行】&quot; class=&quot;headerlink&quot; title=&quot;【时光荏苒，AI与我同行】&quot;&gt;&lt;/a&gt;【时光荏苒，AI与我同行】&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../images/e1d67</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2024/03/14/typora%20mac%E7%89%88%E6%9C%AC%E6%BF%80%E6%B4%BB/"/>
    <id>https://cyqmimc.github.io/2024/03/14/typora%20mac%E7%89%88%E6%9C%AC%E6%BF%80%E6%B4%BB/</id>
    <published>2024-03-14T08:45:03.170Z</published>
    <updated>2024-03-14T08:50:19.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="typora-mac版本激活"><a href="#typora-mac版本激活" class="headerlink" title="typora mac版本激活"></a>typora mac版本激活</h1><p>首先去官网选择mac版本下载安装 typora下载</p><p>然后打开typora包内容找到</p><p>&#x2F;Applications&#x2F;Typora.app&#x2F;Contents&#x2F;Resources&#x2F;TypeMark&#x2F; </p><p>编辑器打开上面文件夹，这里我拉到vscode</p><p>找到page-dist&#x2F;static&#x2F;js&#x2F;Licen..</p><p>hasActivated&#x3D;”true”&#x3D;&#x3D;e.hasActivated </p><p>改为  hasActivated&#x3D;”true”&#x3D;&#x3D;”true”</p><p>重新打开typora成功激活！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;typora-mac版本激活&quot;&gt;&lt;a href=&quot;#typora-mac版本激活&quot; class=&quot;headerlink&quot; title=&quot;typora mac版本激活&quot;&gt;&lt;/a&gt;typora mac版本激活&lt;/h1&gt;&lt;p&gt;首先去官网选择mac版本下载安装 typor</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2022年3月15日后更新GitHub page成功</title>
    <link href="https://cyqmimc.github.io/2024/03/14/2022%E5%B9%B43%E6%9C%8815%E6%97%A5%E5%90%8E%E6%9B%B4%E6%96%B0GitHub-page%E6%88%90%E5%8A%9F/"/>
    <id>https://cyqmimc.github.io/2024/03/14/2022%E5%B9%B43%E6%9C%8815%E6%97%A5%E5%90%8E%E6%9B%B4%E6%96%B0GitHub-page%E6%88%90%E5%8A%9F/</id>
    <published>2024-03-14T08:14:58.000Z</published>
    <updated>2024-03-14T08:18:42.149Z</updated>
    
    <content type="html"><![CDATA[<p>花了一天的时间终于把hexo更新到了github page，期间hexo d 时候老是报错，发现做了下面两个操作成功了 。找了一堆资料，网上好多步骤都不太正确。</p><p>1.要重新进行密钥设置</p><p>2.配置文件进行修改</p><h2 id="一、GitHub-于-2022-年-3-月-15-日删除了较旧的、不安全的密钥类型，从而提高了安全性。"><a href="#一、GitHub-于-2022-年-3-月-15-日删除了较旧的、不安全的密钥类型，从而提高了安全性。" class="headerlink" title="一、GitHub 于 2022 年 3 月 15 日删除了较旧的、不安全的密钥类型，从而提高了安全性。"></a>一、GitHub 于 2022 年 3 月 15 日删除了较旧的、不安全的密钥类型，从而提高了安全性。</h2><p>检查现有 SSH 密钥后，您可以生成新的 SSH 密钥用于身份验证，然后将其添加到 ssh-agent。</p><h2 id="生成新的-SSH-密钥"><a href="#生成新的-SSH-密钥" class="headerlink" title="生成新的 SSH 密钥"></a><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key">生成新的 SSH 密钥</a></h2><p>您可以在本地计算机上生成新的 SSH 密钥。生成密钥后，您可以将公钥添加到您在 GitHub.com 上的帐户，以启用通过 SSH 对 Git 操作进行身份验证。</p><p><strong>注意：</strong> GitHub 于 2022 年 3 月 15 日删除了较旧的、不安全的密钥类型，从而提高了安全性。</p><p>自该日期起，<code>ssh-dss</code>不再支持 DSA 密钥 ( )。您无法将新的 DSA 密钥添加到您在 GitHub.com 上的个人帐户。</p><p>2021 年 11 月 2 日之前的RSA 密钥 ( <code>ssh-rsa</code>)<code>valid_after</code>可以继续使用任何签名算法。该日期之后生成的 RSA 密钥必须使用 SHA-2 签名算法。一些较旧的客户端可能需要升级才能使用 SHA-2 签名。</p><ol><li><p>打开终端。</p></li><li><p>粘贴下面的文本，将示例中使用的电子邮件替换为您的 GitHub 电子邮件地址。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong>如果您使用的是不支持 Ed25519 算法的旧系统，请使用：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p> 这将使用提供的电子邮件作为标签创建一个新的 SSH 密钥。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Generating public/private ALGORITHM key pair.</span><br></pre></td></tr></table></figure><p> 当系统提示您“输入要保存密钥的文件”时，您可以按<strong>Enter</strong>接受默认文件位置。请注意，如果您之前创建了 SSH 密钥，ssh-keygen 可能会要求您重写另一个密钥，在这种情况下，我们建议创建一个自定义命名的 SSH 密钥。为此，请键入默认文件位置并将 id_ALGORITHM 替换为您的自定义密钥名称。</p></li><li><p>在出现提示时，键入安全密码。有关详细信息，请参阅“<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/working-with-ssh-key-passphrases">使用 SSH 密钥密码</a>”。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></li></ol><h2 id="将-SSH-密钥添加到-ssh-agent"><a href="#将-SSH-密钥添加到-ssh-agent" class="headerlink" title="将 SSH 密钥添加到 ssh-agent"></a><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent">将 SSH 密钥添加到 ssh-agent</a></h2><p>在将新的 SSH 密钥添加到 ssh-agent 来管理密钥之前，您应该检查现有的 SSH 密钥并生成新的 SSH 密钥。将 SSH 密钥添加到代理时，请使用默认的 macOS命令，而不是由<a href="https://www.macports.org/">macports</a>、<a href="https://brew.sh/">homebrew</a>或其他外部源<code>ssh-add</code>安装的应用程序。</p><h2 id="二、修改-config-yml文件如下"><a href="#二、修改-config-yml文件如下" class="headerlink" title="二、修改_config.yml文件如下"></a>二、修改_config.yml文件如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:xxxx/xxxx.github.io.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;花了一天的时间终于把hexo更新到了github page，期间hexo d 时候老是报错，发现做了下面两个操作成功了 。找了一堆资料，网上好多步骤都不太正确。&lt;/p&gt;
&lt;p&gt;1.要重新进行密钥设置&lt;/p&gt;
&lt;p&gt;2.配置文件进行修改&lt;/p&gt;
&lt;h2 id=&quot;一、GitHu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>时隔3年我又回来了！</title>
    <link href="https://cyqmimc.github.io/2024/03/13/%E6%97%B6%E9%9A%943%E5%B9%B4%E6%88%91%E5%8F%88%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81/"/>
    <id>https://cyqmimc.github.io/2024/03/13/%E6%97%B6%E9%9A%943%E5%B9%B4%E6%88%91%E5%8F%88%E5%9B%9E%E6%9D%A5%E4%BA%86%EF%BC%81/</id>
    <published>2024-03-13T04:34:57.000Z</published>
    <updated>2024-03-13T04:44:01.135Z</updated>
    
    <content type="html"><![CDATA[<p>2024年，3年时间过的很快，一晃而过，看似没啥变化，其实整个人还是成熟了不少。每天坚持游泳，认真生活，做好每件事情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2024年，3年时间过的很快，一晃而过，看似没啥变化，其实整个人还是成熟了不少。每天坚持游泳，认真生活，做好每件事情。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2021</title>
    <link href="https://cyqmimc.github.io/2021/03/18/2021/"/>
    <id>https://cyqmimc.github.io/2021/03/18/2021/</id>
    <published>2021-03-18T07:19:09.000Z</published>
    <updated>2021-03-18T08:58:02.538Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年开始了，牛年、本命年。</p><p>最近心情不太顺畅，老觉得工作、生活没意思，是因为新工作要满3年的魔咒吗。</p><p>今年肯定是不平凡的一年，购置了西城的小房子，要搬家了。后面有很多未知数。昨天廖总来北京了，去国贸吃了个饭，就回家了，感慨时间过的快，以前一起的兄弟好久不见，虽然觉得还是曾经的少年，没有一点点改变，其实岁月是一把杀猪刀，早就让你失去了往日的激情。</p><p>许久未见的兄弟，见了面也没什么好聊的、好玩的，也就是简简单单的吃个饭。</p><p>现在是最好的年龄也是最需要思考奋斗的年龄。发现身边的人都在飞速进步和改变，自己还是刚刚开窍，时间已经不多，这是多么悲哀的事情。</p><p>抓住美好的岁月、珍惜现在的时光，希望这个十年能够有个好的变化，希望十年后的自己能够依然这样的潇洒自如，无拘无束，自由奔放。</p><p>假如有一天真的暴富，更应该利用这种没有了生活资金的顾虑的优势，好好地做、尝试自己想做的事，不担心失败，或者最起码有一份简单的工作，可以不再考虑竞争晋升，只为与社会、组织、人员有持续的接触，保持人的社会性，将自己的人生重点偏向到生活，享受生活。</p><p><em>暴富</em>可以让<em>你</em>的<em>工作</em>有了更多的选择，可以不要为了挣钱而<em>工作</em>，可以为了爱好去<em>工作</em>啊！也可以去实现自己的梦想啊！既可以创业也可以做投资，让我们的<em>工作</em>有更多的发展空间，或许这个时候<em>你</em>才真正的发现了<em>工作</em>的意义</p><p>安逸，是一个人对自己最大的残忍，它<em>会</em>毁灭我们的理想，腐蚀我们的灵魂，剥夺我们对前途的希望！千万不要在最能拼命的时候选择了养生，奋斗才是实现人生价值的最好途径！</p><p>去丽江感受诗与远方，去迪拜感受奢华的上流生活</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新的一年开始了，牛年、本命年。&lt;/p&gt;
&lt;p&gt;最近心情不太顺畅，老觉得工作、生活没意思，是因为新工作要满3年的魔咒吗。&lt;/p&gt;
&lt;p&gt;今年肯定是不平凡的一年，购置了西城的小房子，要搬家了。后面有很多未知数。昨天廖总来北京了，去国贸吃了个饭，就回家了，感慨时间过的快，以前一起</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://cyqmimc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2021/03/17/5%E7%BA%A7%E6%B1%BD%E8%BD%A6%E5%B0%BE%E6%B0%94%E6%8E%92%E6%94%BE%EF%BC%8C%E8%AF%B7%E8%B5%B6%E7%B4%A7%E9%87%87%E5%8F%96%E4%BD%8E%E6%B1%A1%E6%9F%93%E6%8E%AA%E6%96%BD%EF%BC%81/"/>
    <id>https://cyqmimc.github.io/2021/03/17/5%E7%BA%A7%E6%B1%BD%E8%BD%A6%E5%B0%BE%E6%B0%94%E6%8E%92%E6%94%BE%EF%BC%8C%E8%AF%B7%E8%B5%B6%E7%B4%A7%E9%87%87%E5%8F%96%E4%BD%8E%E6%B1%A1%E6%9F%93%E6%8E%AA%E6%96%BD%EF%BC%81/</id>
    <published>2021-03-17T06:06:08.389Z</published>
    <updated>2021-03-17T06:06:08.389Z</updated>
    
    <content type="html"><![CDATA[<p>由于季节因素的影响，从冬季到初春每年都会密集地产生高密度的粉尘， 因此每年12月至3月，韩国实施微尘季节管理。具体措施如下：</p><p>运输领域</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_04.png" alt="img"></p><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>5级车辆排气限制（首尔地区）</p><ul><li>对象：国家排放标准为5的车辆<br>※但是，紧急车辆，残疾人车辆，带排烟装置（DPF）的车辆等不执行。</li><li>时间：平日从06到21:00</li><li>内容：如有违反，将处以100,000韩元罚款</li></ul><h2 id="5级汽车尾气排放，请赶紧采取低污染措施！"><a href="#5级汽车尾气排放，请赶紧采取低污染措施！" class="headerlink" title="5级汽车尾气排放，请赶紧采取低污染措施！"></a>5级汽车尾气排放，请赶紧采取低污染措施！</h2><ul><li>低污染措施的补贴，例如安装排气减少装置和早期停车</li></ul><p>※要检查我的汽车等级，请搜索互联网门户网站“汽车排放等级系统”。</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>5级车辆在市政停车场的停车费溢价（汉城）</p><ul><li>全国第五类车辆在市政停车场（104个地点）的停车费收取50％的附加费<br>※但是，紧急车辆，残疾人车辆和配备DPF的车辆不包含该附加费。</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>严厉打击营运中的车辆排放物和车辆检查站</p><ul><li>卡车和公共汽车等废气和空转的特殊检查（使用远程测量设备等）</li><li>全面检查私人汽车检验中心（59个地点）</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>乘用车里程积分</p><ul><li>资格：从12月至3月，在首尔旅行4个月内，乘车里程不超过平均距离50％（1,850公里）的会员（需要注册照片）</li><li>已支付10,000里程（相当于10,000韩元）</li></ul><p>商业领域</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_05.png" alt="img"></p><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>加强对排放空气污染物的工作场所的管理</p><ul><li>对出差工作场所进行差异检查，并定期密切监视公民参与监督小组</li><li>扩大医院，旅馆，供热和发电设施（16→43个地点）等大型商业场所（1〜3种）的自愿减排协议</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>加强对扬尘工作场所的管理</p><ul><li>全面检查建筑工地（总建筑面积超过1,000平方米）和检查市民参与监控团队</li><li>加强对旧建筑设备使用限制的检查<br>（政府提供的建筑工地超过100亿韩元→所有政府提供的建筑工地均从首尔订购）</li><li>在产生微尘的地区共同打击无人机使用</li></ul><p>加热领域</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_06.png" alt="img"></p><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>扩大和分布的家用环保锅炉（55,000台）</p><ul><li>20万韩元用于安装环保家用锅炉（低收入家庭50万韩元）</li><li>严厉打击违反环保锅炉安装规定的企业<br>※截止2020年10月，累计提供196,000台</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>提供生态里程特别积分</p><ul><li>目标：与前两年同期相比，节省了20％以上能源的生态里程会员</li><li>详细信息：节省超过20％时支付10,000里程，节省30％以上时支付120,000里程</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>加强对大型建筑物冬季适当采暖温度的管理</p><ul><li>检查能耗大的建筑物的加热温度极限（20℃以下）</li><li>促使转换为高效且环保的锅炉</li></ul><p>减少接触场</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_07.png" alt="img"></p><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>加强主要干道和一般道路的清洁</p><ul><li>增加对优先管理道路的指定（41 157.96km→53 208.6km）并加强清洁（每天3次→每天4次）</li><li>扩大清洁车工作区（每天50公里→60公里）</li><li>推出69辆环保型道路清洁车</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>多用途设施的室内空气质量特别检查</p><ul><li>专门检查地下站，公共交通（如日托中心）和弱势群体使用的设施的室内空气质量管理状况</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>加强粉尘密集管理区管理</p><ul><li>指定地区：6个地方（锦川，永登浦，洞雀，中区，恩平，瑞草）</li><li>扩大洒水车和吸尘车的运行（一天两次），全面检查排放场，清理大型建筑工地周围道路的责任等。</li></ul><p><img src="https://cleanair.seoul.go.kr/images/season/img_03.png" alt="img"></p><p>细尘测量分析和信息提供</p><ul><li>在排放源周围安装300个简单的测量设备</li><li>通过空气环境信息系统依次披露细粉尘测量结果</li><li>移动实验室（移动实时大气测量系统）运营</li></ul><h2 id="首尔市提出的减少粉尘的5项行动"><a href="#首尔市提出的减少粉尘的5项行动" class="headerlink" title="首尔市提出的减少粉尘的5项行动"></a>首尔市提出的减少粉尘的5项行动</h2><p><img src="https://cleanair.seoul.go.kr/images/season/img_09.png" alt="img"></p><p>5类车辆 安装减排装置</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_10.png" alt="img"></p><p>空闲不！ 绿色驾驶习惯 保持</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_11.png" alt="img"></p><p>家庭 环保锅炉用。。。来代替</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_12.png" alt="img"></p><p>足够的 加热温度（20℃） 保持</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_13.png" alt="img"></p><p>环保里程，汽车里程 注册</p><h2 id="在高浓度细粉尘情况下保护健康的五种方法"><a href="#在高浓度细粉尘情况下保护健康的五种方法" class="headerlink" title="在高浓度细粉尘情况下保护健康的五种方法"></a>在高浓度细粉尘情况下保护健康的五种方法</h2><p><img src="https://cleanair.seoul.go.kr/images/season/img_14.png" alt="img"></p><p>出去 最好 避免</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_15.png" alt="img"></p><p>外出时 卫生口罩 穿</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_16.png" alt="img"></p><p>出门时要避开空气污染严重的地方， 减少活动量</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_17.png" alt="img"></p><p>外出后 彻底清洗</p><p><img src="https://cleanair.seoul.go.kr/images/season/img_18.png" alt="img"></p><p>通风，室内水清洗等 管理室内空气质量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于季节因素的影响，从冬季到初春每年都会密集地产生高密度的粉尘， 因此每年12月至3月，韩国实施微尘季节管理。具体措施如下：&lt;/p&gt;
&lt;p&gt;运输领域&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cleanair.seoul.go.kr/images/season/im</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020-08-07</title>
    <link href="https://cyqmimc.github.io/2020/08/07/2020-08-07/"/>
    <id>https://cyqmimc.github.io/2020/08/07/2020-08-07/</id>
    <published>2020-08-07T02:58:09.000Z</published>
    <updated>2020-08-07T02:58:09.318Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>2020-08-06</title>
    <link href="https://cyqmimc.github.io/2020/08/06/2020-08-06/"/>
    <id>https://cyqmimc.github.io/2020/08/06/2020-08-06/</id>
    <published>2020-08-06T09:42:32.000Z</published>
    <updated>2020-08-06T09:43:33.499Z</updated>
    
    <content type="html"><![CDATA[<p>利用Node.js的多版本管理器n</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo npm cache clean -f //清除nodejs的cache：</span><br><span class="line">sudo npm install -g n //使用npm安装n模块</span><br><span class="line">npm view node versions // node所有版本</span><br><span class="line">sudo n latest // 升级到最新版本</span><br><span class="line">sudo n stable // 升级到稳定版本</span><br><span class="line">sudo n xx.xx // 升级到具体版本号</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;利用Node.js的多版本管理器n&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2020/08/06/brew%20%E6%9B%B4%E6%8D%A2%E6%BA%90/"/>
    <id>https://cyqmimc.github.io/2020/08/06/brew%20%E6%9B%B4%E6%8D%A2%E6%BA%90/</id>
    <published>2020-08-06T08:02:01.349Z</published>
    <updated>2020-08-06T08:02:01.349Z</updated>
    
    <content type="html"><![CDATA[<p>2020-08-06</p><h1 id="brew-更换源"><a href="#brew-更换源" class="headerlink" title="brew 更换源"></a><a href="https://www.cnblogs.com/iAmSoScArEd/p/12394625.html">brew 更换源</a></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 1、替换brew.git:</span><br><span class="line">$ cd &quot;$(brew --repo)&quot;</span><br><span class="line"># 中国科大:</span><br><span class="line">$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"># 清华大学:</span><br><span class="line">$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"># 2、替换homebrew-core.git:</span><br><span class="line">$ cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line"># 中国科大:</span><br><span class="line">$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"># 清华大学:</span><br><span class="line">$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"># 3、替换homebrew-bottles:</span><br><span class="line"># 中国科大:</span><br><span class="line">$ echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br><span class="line"># 清华大学:</span><br><span class="line">$ echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># 4、应用生效:</span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p>切换官方源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1、重置brew.git:</span><br><span class="line">$ cd &quot;$(brew --repo)&quot;</span><br><span class="line">$ git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"># 2、重置homebrew-core.git:</span><br><span class="line">$ cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">$ git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line"># 3、重置homebrew-bottles:</span><br><span class="line">$ echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://github.com/Homebrew/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile </span><br><span class="line">$ source ~/.bash_profile</span><br><span class="line"></span><br><span class="line"># 4、应用生效:</span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/iAmSoScArEd/p/12394625.html">https://www.cnblogs.com/iAmSoScArEd/p/12394625.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020-08-06&lt;/p&gt;
&lt;h1 id=&quot;brew-更换源&quot;&gt;&lt;a href=&quot;#brew-更换源&quot; class=&quot;headerlink&quot; title=&quot;brew 更换源&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/iAmSoScArEd</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020-07-20</title>
    <link href="https://cyqmimc.github.io/2020/07/20/2020-07-20/"/>
    <id>https://cyqmimc.github.io/2020/07/20/2020-07-20/</id>
    <published>2020-07-20T03:33:57.000Z</published>
    <updated>2020-08-05T08:00:57.910Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mac-命令"><a href="#Mac-命令" class="headerlink" title="Mac 命令"></a>Mac 命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -ri /usr/local/lib/python3.7/site-packages/wordcloud  /Users/mimc/opt/anaconda3/lib/python3.7/site-packages/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Mac-命令&quot;&gt;&lt;a href=&quot;#Mac-命令&quot; class=&quot;headerlink&quot; title=&quot;Mac 命令&quot;&gt;&lt;/a&gt;Mac 命令&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020-06-26</title>
    <link href="https://cyqmimc.github.io/2020/06/26/2020-06-26/"/>
    <id>https://cyqmimc.github.io/2020/06/26/2020-06-26/</id>
    <published>2020-06-26T11:24:49.000Z</published>
    <updated>2020-06-27T11:39:38.056Z</updated>
    
    <content type="html"><![CDATA[<p>端午假期3天在家猫着，上午去理了个发，买了点菜，中午吃的火锅，下午在办公桌前坐了一下午，学写了funal cut 知识，听了几部电影。</p><p>翻出了10年前刚步入职场的照片，满满的胶原蛋白，感觉十年时间自己没怎么变，只是勉强跟随时代罢了，并没有太多的惊喜变化，在最美好的时光，十年在原地踏步，感觉还是很可怕的，人生能有几个十年，而且是最美好的时光，奋斗吧少年。希望在下一个十年，回首时候能够有惊喜。能够不枉此生。</p><p>我们一生中会与很多人相遇，无论是擦肩而过，还是厮守一生，我相信所有的相遇都是久别重逢，我相信所有的再见可能就是再也不见，所有对爱你的人挥之以爱，温柔以待。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;端午假期3天在家猫着，上午去理了个发，买了点菜，中午吃的火锅，下午在办公桌前坐了一下午，学写了funal cut 知识，听了几部电影。&lt;/p&gt;
&lt;p&gt;翻出了10年前刚步入职场的照片，满满的胶原蛋白，感觉十年时间自己没怎么变，只是勉强跟随时代罢了，并没有太多的惊喜变化，在最美</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020-05-30</title>
    <link href="https://cyqmimc.github.io/2020/05/30/2020-05-30/"/>
    <id>https://cyqmimc.github.io/2020/05/30/2020-05-30/</id>
    <published>2020-05-30T01:34:47.000Z</published>
    <updated>2020-05-31T09:43:08.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h2><h4 id="《小森林-冬篇》2015年森淳一美食剧情电影"><a href="#《小森林-冬篇》2015年森淳一美食剧情电影" class="headerlink" title="《小森林.冬篇》2015年森淳一美食剧情电影"></a>《小森林.冬篇》2015年森淳一美食剧情电影</h4><p>大城市生活的没有安全感，回到田园生活，逃避是一种疗愈，人的状态是一种交替，过一段城市生活也要过一段田园生活。在浪费中获得乐趣就不算浪费时光。</p><h4 id="《内在美》韩国"><a href="#《内在美》韩国" class="headerlink" title="***《内在美》韩国"></a>***《内在美》韩国</h4><p>内在的灵魂和思想不会变。</p><h4 id="《再次出发begin-again》"><a href="#《再次出发begin-again》" class="headerlink" title="***《再次出发begin again》"></a>***《再次出发begin again》</h4><p>温情、音乐电影</p><h4 id="《我在你床下》日本电影"><a href="#《我在你床下》日本电影" class="headerlink" title="《我在你床下》日本电影"></a>《我在你床下》日本电影</h4><p>三井，懦弱，家暴，暗恋，极品宅男，爱到极致–变态</p><p>《》</p><h4 id="《唯一》"><a href="#《唯一》" class="headerlink" title="《唯一》"></a>《唯一》</h4><h4 id="《僵尸刑警》"><a href="#《僵尸刑警》" class="headerlink" title="《僵尸刑警》"></a>《僵尸刑警》</h4><h4 id="《春去冬来又一春》"><a href="#《春去冬来又一春》" class="headerlink" title="《春去冬来又一春》"></a>《春去冬来又一春》</h4><p>人性电影，你喜欢的也是别人喜欢的</p><h4 id="《无姓之人》"><a href="#《无姓之人》" class="headerlink" title="《无姓之人》"></a>《无姓之人》</h4><p>科幻电影，不同的选择出现不同的人生，珍惜每一次选择的机会，不要留有遗憾</p><h4 id="《被嫌弃的松子的一生》"><a href="#《被嫌弃的松子的一生》" class="headerlink" title="《被嫌弃的松子的一生》"></a>《被嫌弃的松子的一生》</h4><p>日本变态人生</p><h4 id="《真心半解The-Half-of-It》"><a href="#《真心半解The-Half-of-It》" class="headerlink" title="***《真心半解The Half of It》"></a>***《真心半解The Half of It》</h4><p>探索自然和爱，🍍🦉🐛</p><h4 id="《》"><a href="#《》" class="headerlink" title="《》"></a>《》</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;电影&quot;&gt;&lt;a href=&quot;#电影&quot; class=&quot;headerlink&quot; title=&quot;电影&quot;&gt;&lt;/a&gt;电影&lt;/h2&gt;&lt;h4 id=&quot;《小森林-冬篇》2015年森淳一美食剧情电影&quot;&gt;&lt;a href=&quot;#《小森林-冬篇》2015年森淳一美食剧情电影&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020-05-07</title>
    <link href="https://cyqmimc.github.io/2020/05/06/2020-05-07/"/>
    <id>https://cyqmimc.github.io/2020/05/06/2020-05-07/</id>
    <published>2020-05-06T07:30:19.000Z</published>
    <updated>2020-05-06T07:37:36.840Z</updated>
    
    <content type="html"><![CDATA[<p>五一假期结束了，第一天在家打扫卫生，洗衣服，收拾东西还算平常，第二天跟着飞鸿去了延期露营，玩的很开心，小河流、小树林、帐篷、野炊，喝酒、做饭，这不就是一直想要的生活。可是过的也很平常，兴奋不起来，没有幸福的感觉，对一切没有激情。飞鸿在拍花，拍视频，我什么也不想干，失去了发现美的眼睛。后面两天宅在家里，长肉，以前以为自己是瘦人体质不会胖，现在发现我错了，一年胖了20斤，都长在了肚子上，太丑了，第一次害怕夏天，害怕穿短袖。感觉变成了中年油腻男人，厌恶。不喜欢现在的这个状态，我需要好起来。练出腹肌，找回生活的激情。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;五一假期结束了，第一天在家打扫卫生，洗衣服，收拾东西还算平常，第二天跟着飞鸿去了延期露营，玩的很开心，小河流、小树林、帐篷、野炊，喝酒、做饭，这不就是一直想要的生活。可是过的也很平常，兴奋不起来，没有幸福的感觉，对一切没有激情。飞鸿在拍花，拍视频，我什么也不想干，失去了发现</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://cyqmimc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2020-04-25</title>
    <link href="https://cyqmimc.github.io/2020/04/25/2020-04-25/"/>
    <id>https://cyqmimc.github.io/2020/04/25/2020-04-25/</id>
    <published>2020-04-25T10:30:02.000Z</published>
    <updated>2020-04-26T02:16:22.647Z</updated>
    
    <content type="html"><![CDATA[<p>今天入手了3d打印机，打印小哪吒要11个小时，太慢了，等的抓狂。打印效果还是不错的。后面开始研究3d建模软件。和切片技术。</p><p>PLA使用熔融堆积成型技术（FDM）3d打印，成形后机械性能以及硬度较树脂好，但因为成型本身技术的缺陷，精度比树脂较差，复杂模型成型效果也不好，层纹明显。但PLA材料PLA颜色可以多种选择，不建议打磨上色。</p><p>树脂采用SLA（光固化技术）打印，是目前主流<a href="http://www.dayinpai.com/">3D打印</a>成型技术中精度最高，表面成型质量好，打印精度高，性价比最高。光敏树脂打印出来整体一种颜色，后期需要打磨上色。如果有温度方面需要，可以选择耐高温光敏树脂。</p><p>Word 中可以用替换“∧p”，来实现去除空格，简单应用与网页上下载的文章有很多空格，可以简单去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天入手了3d打印机，打印小哪吒要11个小时，太慢了，等的抓狂。打印效果还是不错的。后面开始研究3d建模软件。和切片技术。&lt;/p&gt;
&lt;p&gt;PLA使用熔融堆积成型技术（FDM）3d打印，成形后机械性能以及硬度较树脂好，但因为成型本身技术的缺陷，精度比树脂较差，复杂模型成型效果</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://cyqmimc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2020-04-22</title>
    <link href="https://cyqmimc.github.io/2020/04/22/2020-04-22/"/>
    <id>https://cyqmimc.github.io/2020/04/22/2020-04-22/</id>
    <published>2020-04-21T23:54:19.000Z</published>
    <updated>2020-04-22T00:33:21.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="乱写一通"><a href="#乱写一通" class="headerlink" title="乱写一通"></a>乱写一通</h2><p>这两天天气不错，早上很早就来到了单位，早点出发效率很高，节省了路上的时间，心情大好。</p><p>早上思路比较敏捷，坐办公桌前感觉很舒服。</p><p>早上穿了CA刚买的新衣服，上下装平均100-200，价格亲民。穿着也很舒服，以后买衣服就他们家了。合适</p><p>上周末去八达岭奥莱走了一圈，本来想买件衣服，开心下，后来发现没有合适的，价格贵是一方面，另一方真的不喜欢，我发现每件衣服上面都是夸张的logo，显的很浮夸，逛街的人好多穿的也很夸张，大logo，张扬个性，感觉自己一点也不喜欢。现在就喜欢舒适，简单，特别点的东西。</p><p>自己是一个非常直接的人，以为别人也是这样，我错了，每个人都有自己的性格，这个最近感受很深刻，要尊重不同个体的存在，自己还是太小孩子了，程序猿+无忧的人生，让自己变得很幼稚。以后要成熟起来，毕竟已经老大不小了，需要撑起一片天空，人生苦短，年轻真好，可是时间很短暂，倒不是要多么励志，作出什么伟大的成就，但也不能再浪费自己的时间了，在人生最美好的一段时间活的更精彩一点。</p><p>我很渺小、我很脆弱、总是不敢去面对，面对困难首先想到的是逃避、推脱。</p><p>我要改变，我也喜欢挑战，那为什么表现出就很负能量呢。</p><p>我总结：</p><p>以前受过伤，主要是高考对我打击太大了，一次次的摧毁我。我需要从阴影中走出来。</p><p>我思考：</p><p>小时候自己是很自信的，一直都是小伙伴的领袖，一直都冲在最前面，一直都会得到赞赏</p><p>现在需要正能量，不管面对什么，首先想着冲上去，不能先退缩，万一成功了呢，需要正能量和成功来让自己更加的自信。</p><p><img src="/images/619.jpg" alt="花花"></p><h3 id="最美好的时光，不负韶华"><a href="#最美好的时光，不负韶华" class="headerlink" title="最美好的时光，不负韶华"></a>最美好的时光，不负韶华</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;乱写一通&quot;&gt;&lt;a href=&quot;#乱写一通&quot; class=&quot;headerlink&quot; title=&quot;乱写一通&quot;&gt;&lt;/a&gt;乱写一通&lt;/h2&gt;&lt;p&gt;这两天天气不错，早上很早就来到了单位，早点出发效率很高，节省了路上的时间，心情大好。&lt;/p&gt;
&lt;p&gt;早上思路比较敏捷，坐办公</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://cyqmimc.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2020-04-08</title>
    <link href="https://cyqmimc.github.io/2020/04/08/2020-04-08/"/>
    <id>https://cyqmimc.github.io/2020/04/08/2020-04-08/</id>
    <published>2020-04-08T08:16:11.000Z</published>
    <updated>2020-04-11T23:30:57.263Z</updated>
    
    <content type="html"><![CDATA[<p>1、主要城市中英文对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">citydata=&#123;</span><br><span class="line">    <span class="string">&#x27;Vienna&#x27;</span>: <span class="string">&#x27;维也纳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Dublin&#x27;</span>: <span class="string">&#x27;都柏林&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Reykjavik&#x27;</span>: <span class="string">&#x27;雷克雅未克&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Minsk&#x27;</span>: <span class="string">&#x27;明斯克&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sofia&#x27;</span>: <span class="string">&#x27;索非亚&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Warsaw&#x27;</span>: <span class="string">&#x27;华沙&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Brussels&#x27;</span>: <span class="string">&#x27;布鲁塞尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Berlin&#x27;</span>: <span class="string">&#x27;柏林&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Copenhagen&#x27;</span>: <span class="string">&#x27;哥本哈根&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Moscow&#x27;</span>: <span class="string">&#x27;莫斯科&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Paris&#x27;</span>: <span class="string">&#x27;巴黎&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Helsinki&#x27;</span>: <span class="string">&#x27;赫尔辛基&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Amsterdam&#x27;</span>: <span class="string">&#x27;阿姆斯特丹&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Prague&#x27;</span>: <span class="string">&#x27;布拉格&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Riga&#x27;</span>: <span class="string">&#x27;里加&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vilnius&#x27;</span>: <span class="string">&#x27;维尔纽斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bucharest&#x27;</span>: <span class="string">&#x27;布加勒斯特&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Skopje&#x27;</span>: <span class="string">&#x27;斯科普里&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Luxembourg&#x27;</span>: <span class="string">&#x27;卢森堡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Monaco&#x27;</span>: <span class="string">&#x27;摩纳哥&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Oslo&#x27;</span>: <span class="string">&#x27;奥斯路&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Lisbon&#x27;</span>: <span class="string">&#x27;里斯本&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Stockholm&#x27;</span>: <span class="string">&#x27;斯德哥尔摩&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bern&#x27;</span>: <span class="string">&#x27;伯尔尼&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bratislava&#x27;</span>: <span class="string">&#x27;布拉提斯拉发&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ljubljana&#x27;</span>: <span class="string">&#x27;卢布尔雅那&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kiev&#x27;</span>: <span class="string">&#x27;基辅&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Madrid&#x27;</span>: <span class="string">&#x27;马德里&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Athens&#x27;</span>: <span class="string">&#x27;雅典&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Budapest&#x27;</span>: <span class="string">&#x27;布达佩斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Rome&#x27;</span>: <span class="string">&#x27;罗马&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;London&#x27;</span>: <span class="string">&#x27;伦敦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kabul&#x27;</span>: <span class="string">&#x27;喀布尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Abu Dhabi&#x27;</span>: <span class="string">&#x27;阿布扎比&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Muscat&#x27;</span>: <span class="string">&#x27;马斯喀特&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Baku&#x27;</span>: <span class="string">&#x27;巴库&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Islamabad&#x27;</span>: <span class="string">&#x27;伊斯兰堡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Manama&#x27;</span>: <span class="string">&#x27;麦纳麦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Thimphu&#x27;</span>: <span class="string">&#x27;廷布&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pyongyang&#x27;</span>: <span class="string">&#x27;平壤&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Manila&#x27;</span>: <span class="string">&#x27;马尼拉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T’bilisi&#x27;</span>: <span class="string">&#x27;第比利斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;seoul&#x27;</span>: <span class="string">&#x27;首尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Phnom Penh&#x27;</span>: <span class="string">&#x27;金边&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kuwait&#x27;</span>: <span class="string">&#x27;科威特城&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vientiane&#x27;</span>: <span class="string">&#x27;万象&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Beirut&#x27;</span>: <span class="string">&#x27;贝鲁特&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Male&#x27;</span>: <span class="string">&#x27;马累&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kuala Lumpur&#x27;</span>: <span class="string">&#x27;吉隆坡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Elggydggmgj&#x27;</span>: <span class="string">&#x27;乌兰巴托&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Dhaka&#x27;</span>: <span class="string">&#x27;达卡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Yangon&#x27;</span>: <span class="string">&#x27;仰光&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kathmandu&#x27;</span>: <span class="string">&#x27;加德满都&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tokyo&#x27;</span>: <span class="string">&#x27;东京&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Riyadh&#x27;</span>: <span class="string">&#x27;利雅得&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Colombo&#x27;</span>: <span class="string">&#x27;科伦坡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bangkok&#x27;</span>: <span class="string">&#x27;曼谷&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ankara&#x27;</span>: <span class="string">&#x27;安卡拉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bandar Seri Begawan&#x27;</span>: <span class="string">&#x27;斯里巴加湾市&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tashkent&#x27;</span>: <span class="string">&#x27;塔什干&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Singapore&#x27;</span>: <span class="string">&#x27;新加坡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Damascus&#x27;</span>: <span class="string">&#x27;大马士革&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sanaa&#x27;</span>: <span class="string">&#x27;萨那&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tehran&#x27;</span>: <span class="string">&#x27;德黑兰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Baghdad&#x27;</span>: <span class="string">&#x27;巴格达&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Jerusalem&#x27;</span>: <span class="string">&#x27;耶路撒冷&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New Delhi&#x27;</span>: <span class="string">&#x27;新德里&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Jakarta&#x27;</span>: <span class="string">&#x27;雅加达&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Amman&#x27;</span>: <span class="string">&#x27;安曼&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Hanoi&#x27;</span>: <span class="string">&#x27;河内&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Beijing&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Buenos Aires&#x27;</span>: <span class="string">&#x27;布宜诺斯艾利斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sucre&#x27;</span>: <span class="string">&#x27;苏克雷&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Brasilia&#x27;</span>: <span class="string">&#x27;巴西利亚&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Quito&#x27;</span>: <span class="string">&#x27;基多&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Havana&#x27;</span>: <span class="string">&#x27;哈瓦那&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bogota&#x27;</span>: <span class="string">&#x27;波哥大&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ottawa&#x27;</span>: <span class="string">&#x27;渥太华&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Lima&#x27;</span>: <span class="string">&#x27;利马&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Washington&#x27;</span>: <span class="string">&#x27;华盛顿&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mexico City&#x27;</span>: <span class="string">&#x27;墨西哥城&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Montevide&#x27;</span>: <span class="string">&#x27;蒙得维的亚&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Caracas&#x27;</span>: <span class="string">&#x27;加拉加斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kingston&#x27;</span>: <span class="string">&#x27;金斯敦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Santiago&#x27;</span>: <span class="string">&#x27;圣地亚哥&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Panama&#x27;</span>: <span class="string">&#x27;巴拿马城&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Algiers &#x27;</span>: <span class="string">&#x27;阿尔及尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cairo&#x27;</span>: <span class="string">&#x27;开罗&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Addis Ababa&#x27;</span>: <span class="string">&#x27;亚的斯亚贝巴&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Luanda&#x27;</span>: <span class="string">&#x27;罗安达&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bujumbura &#x27;</span>: <span class="string">&#x27;布琼布拉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Malabo&#x27;</span>: <span class="string">&#x27;马拉博&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Brazzaville&#x27;</span>: <span class="string">&#x27;布拉柴维尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kinshasa &#x27;</span>: <span class="string">&#x27;金沙萨&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Conakry&#x27;</span>: <span class="string">&#x27;科纳克里&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Harare&#x27;</span>: <span class="string">&#x27;哈拉雷&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Nairobi&#x27;</span>: <span class="string">&#x27;内罗华&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tripoli&#x27;</span>: <span class="string">&#x27;的黎波里&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Antananarivo&#x27;</span>: <span class="string">&#x27;塔那那利佛&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Port Louis&#x27;</span>: <span class="string">&#x27;路易港&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Nouakchott&#x27;</span>: <span class="string">&#x27;努瓦克肖特&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Rabat&#x27;</span>: <span class="string">&#x27;拉巴特&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Windhoek&#x27;</span>: <span class="string">&#x27;温得和克&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cape Town&#x27;</span>: <span class="string">&#x27;比勒陀利亚&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Abuja&#x27;</span>: <span class="string">&#x27;阿布贾&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Khartoum&#x27;</span>: <span class="string">&#x27;喀土穆&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mogadishu&#x27;</span>: <span class="string">&#x27;摩加迪沙&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Dodoma&#x27;</span>: <span class="string">&#x27;达累斯萨拉姆&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tunis&#x27;</span>: <span class="string">&#x27;突尼斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kampala&#x27;</span>: <span class="string">&#x27;坎帕拉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Lusaka&#x27;</span>: <span class="string">&#x27;卢萨卡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N’Djamena&#x27;</span>: <span class="string">&#x27;恩贾梅纳&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bangui&#x27;</span>: <span class="string">&#x27;班吉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Canberra&#x27;</span>: <span class="string">&#x27;堪培拉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Port Moresby&#x27;</span>: <span class="string">&#x27;莫尔兹比港&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Suva&#x27;</span>: <span class="string">&#x27;苏瓦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Port-Vila&#x27;</span>: <span class="string">&#x27;维拉港&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Wellington&#x27;</span>: <span class="string">&#x27;惠灵顿&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Honolulu&#x27;</span>: <span class="string">&#x27;夏威夷檀香山&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Anchorage&#x27;</span>: <span class="string">&#x27;阿拉斯加安克雷奇&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;San Francisco&#x27;</span>: <span class="string">&#x27;旧金山&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Seattle&#x27;</span>: <span class="string">&#x27;西雅图&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Los Angeles&#x27;</span>: <span class="string">&#x27;洛杉矶&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Phoenix&#x27;</span>: <span class="string">&#x27;凤凰城&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Denver&#x27;</span>: <span class="string">&#x27;丹佛&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Minneapolis&#x27;</span>: <span class="string">&#x27;明尼亚波利斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;St. Paul&#x27;</span>: <span class="string">&#x27;圣保罗&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New Orleans&#x27;</span>: <span class="string">&#x27;新奥尔良&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Chicago&#x27;</span>: <span class="string">&#x27;芝加哥&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Montgomery&#x27;</span>: <span class="string">&#x27;蒙哥马利&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Indianapolis&#x27;</span>: <span class="string">&#x27;印地安纳波利斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Atlanta&#x27;</span>: <span class="string">&#x27;亚特兰大&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Detroit&#x27;</span>: <span class="string">&#x27;底特律&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Washington DC&#x27;</span>: <span class="string">&#x27;华盛顿哥伦比亚特区&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Philadelphia&#x27;</span>: <span class="string">&#x27;费城&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New York&#x27;</span>: <span class="string">&#x27;纽约&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Boston&#x27;</span>: <span class="string">&#x27;波士顿&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Alabama&#x27;</span>: <span class="string">&#x27;亚拉巴马州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Alaska State&#x27;</span>: <span class="string">&#x27;阿拉斯加州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Arizona –AZ&#x27;</span>: <span class="string">&#x27;亚利桑那州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;亚利桑那州&#x27;</span>: <span class="string">&#x27;阿肯色州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;California&#x27;</span>: <span class="string">&#x27;加利福尼亚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;North Carolina&#x27;</span>: <span class="string">&#x27;北开罗莱纳州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;South Carolina&#x27;</span>: <span class="string">&#x27;南开罗莱纳州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Colorado–CO&#x27;</span>: <span class="string">&#x27;科罗拉多州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connecticut–CT&#x27;</span>: <span class="string">&#x27;康涅狄格州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Delaware/State of Delaware&#x27;</span>: <span class="string">&#x27;特拉华州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Florida&#x27;</span>: <span class="string">&#x27;佛罗里达州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Georgia–GA&#x27;</span>: <span class="string">&#x27;佐治亚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Hawaii State&#x27;</span>: <span class="string">&#x27;夏威夷州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Idaho–ID&#x27;</span>: <span class="string">&#x27;爱达荷州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Illinois – IL&#x27;</span>: <span class="string">&#x27;伊利诺伊州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Iowa&#x27;</span>: <span class="string">&#x27;艾奥瓦州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kansas – KS&#x27;</span>: <span class="string">&#x27;堪萨斯州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kentucky&#x27;</span>: <span class="string">&#x27;肯塔基州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Louisiana – LA&#x27;</span>: <span class="string">&#x27;路易斯安那州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Maine – ME&#x27;</span>: <span class="string">&#x27;缅因州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Maryland&#x27;</span>: <span class="string">&#x27;马里兰州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Massachusetts&#x27;</span>: <span class="string">&#x27;马萨诸塞州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Michigan&#x27;</span>: <span class="string">&#x27;密歇根州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Minnessota&#x27;</span>: <span class="string">&#x27;明尼苏达州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mississippi – MS&#x27;</span>: <span class="string">&#x27;密西西比州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Missouri&#x27;</span>: <span class="string">&#x27;密苏里州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Montana&#x27;</span>: <span class="string">&#x27;蒙大拿州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Nebraska – NE&#x27;</span>: <span class="string">&#x27;内布拉斯加州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Nevada&#x27;</span>: <span class="string">&#x27;内华达州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New Hampshire&#x27;</span>: <span class="string">&#x27;新罕布什尔州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New Jersey&#x27;</span>: <span class="string">&#x27;新泽西&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;New mexico – NM&#x27;</span>: <span class="string">&#x27;新墨西哥州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;North Dakota&#x27;</span>: <span class="string">&#x27;北达科他州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;South Dakota&#x27;</span>: <span class="string">&#x27;南达科他州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Ohio&#x27;</span>: <span class="string">&#x27;俄亥俄州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Oklahoma&#x27;</span>: <span class="string">&#x27;俄克拉荷马州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Oregon&#x27;</span>: <span class="string">&#x27;俄勒冈州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pennsylvania&#x27;</span>: <span class="string">&#x27;宾夕法尼亚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Rhode Island&#x27;</span>: <span class="string">&#x27;罗德岛州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tennessee&#x27;</span>: <span class="string">&#x27;田纳西州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Texas&#x27;</span>: <span class="string">&#x27;德克萨斯州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Utah&#x27;</span>: <span class="string">&#x27;犹他州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vermont&#x27;</span>: <span class="string">&#x27;佛蒙特州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Verginia&#x27;</span>: <span class="string">&#x27;弗吉尼亚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;West Virginia&#x27;</span>: <span class="string">&#x27;西弗吉尼亚州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Wisconsin&#x27;</span>: <span class="string">&#x27;威斯康星州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Wyoming&#x27;</span>: <span class="string">&#x27;怀俄明州&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Aklavik&#x27;</span>: <span class="string">&#x27;阿克拉维克&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Edmonton&#x27;</span>: <span class="string">&#x27;艾德蒙顿&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Winnipeg&#x27;</span>: <span class="string">&#x27;温尼伯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vancouver&#x27;</span>: <span class="string">&#x27;温哥华&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Toronto&#x27;</span>: <span class="string">&#x27;多伦多&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Montreal&#x27;</span>: <span class="string">&#x27;蒙特利尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;St. John’s&#x27;</span>: <span class="string">&#x27;圣约翰斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Halifax&#x27;</span>: <span class="string">&#x27;哈里法克斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Brisbane&#x27;</span>: <span class="string">&#x27;布里斯班&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Melbourne&#x27;</span>: <span class="string">&#x27;墨尔本&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Sydney&#x27;</span>: <span class="string">&#x27;悉尼&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Adelaide&#x27;</span>: <span class="string">&#x27;阿德莱德&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Darwin&#x27;</span>: <span class="string">&#x27;达尔文&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Perth&#x27;</span>: <span class="string">&#x27;珀斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Vladivostok&#x27;</span>: <span class="string">&#x27;符拉迪沃斯托克&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kamchatka&#x27;</span>: <span class="string">&#x27;堪察加&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Anadyr&#x27;</span>: <span class="string">&#x27;阿纳德尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Oxford&#x27;</span>: <span class="string">&#x27;牛津&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Plymouth&#x27;</span>: <span class="string">&#x27;普利茅斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cambridge&#x27;</span>: <span class="string">&#x27;剑桥&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Birmingham&#x27;</span>: <span class="string">&#x27;伯明翰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Manchester&#x27;</span>: <span class="string">&#x27;曼彻斯特&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Liverpool&#x27;</span>: <span class="string">&#x27;利物浦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bradfold&#x27;</span>: <span class="string">&#x27;布拉德福德&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Nottingham&#x27;</span>: <span class="string">&#x27;诺丁汉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Edinburgh&#x27;</span>: <span class="string">&#x27;爱丁堡&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Provence&#x27;</span>: <span class="string">&#x27;普罗旺斯&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Lyon&#x27;</span>: <span class="string">&#x27;里昂&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Barcelona&#x27;</span>: <span class="string">&#x27;巴塞罗那&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Geneva&#x27;</span>: <span class="string">&#x27;日内瓦&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Zurich&#x27;</span>: <span class="string">&#x27;苏黎世&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Frankfurt&#x27;</span>: <span class="string">&#x27;法兰克福&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Guatemala&#x27;</span>: <span class="string">&#x27;危地马拉&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;San Salvador&#x27;</span>: <span class="string">&#x27;圣萨尔瓦多&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Tegucigalpa&#x27;</span>: <span class="string">&#x27;特古西加尔巴&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Managua&#x27;</span>: <span class="string">&#x27;马那瓜&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Aden&#x27;</span>: <span class="string">&#x27;亚丁&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Algiers&#x27;</span>: <span class="string">&#x27;阿尔及尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kiritimati&#x27;</span>: <span class="string">&#x27;圣诞岛&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Kuwait City&#x27;</span>: <span class="string">&#x27;科威特城&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Karachi&#x27;</span>: <span class="string">&#x27;卡拉奇&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Lahore&#x27;</span>: <span class="string">&#x27;拉合尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Mumbai&#x27;</span>: <span class="string">&#x27;孟买&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Seoul&#x27;</span>: <span class="string">&#x27;首尔&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Osaka&#x27;</span>: <span class="string">&#x27;大阪&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Nagoya&#x27;</span>: <span class="string">&#x27;名古屋&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Chatham Island&#x27;</span>: <span class="string">&#x27;查塔姆群岛&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Auckland&#x27;</span>: <span class="string">&#x27;奥克兰&#x27;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2、字典值和名称互换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">citydata_new=<span class="built_in">dict</span>(<span class="built_in">zip</span>(citydata.values(),citydata.keys()))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#利用字典匹配值</span></span><br><span class="line">df[<span class="string">&#x27;city&#x27;</span>]=df[<span class="string">&#x27;城市&#x27;</span>].<span class="built_in">map</span>(citydata_new)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt.lx.<span class="built_in">str</span>.contains(<span class="string">&#x27;发展国家&#x27;</span>)<span class="comment">#字符串判断是否包含关键词</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt[<span class="string">&#x27;lx1&#x27;</span>]=dt.lx.<span class="built_in">str</span>.split(<span class="string">&#x27;+&#x27;</span>).apply(<span class="keyword">lambda</span> x :x[-<span class="number">1</span>])<span class="comment">#字符串分割后取不同的部分值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dt = pd.merge(df,dataset,on=<span class="string">&#x27;mc&#x27;</span>,how=<span class="string">&#x27;inner&#x27;</span>)<span class="comment">#数据连接</span></span><br><span class="line">dt[<span class="string">&#x27;AQI&#x27;</span>]=dt.<span class="built_in">max</span>(axis=<span class="number">1</span>)<span class="comment">#取最大值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#词云图</span></span><br><span class="line"><span class="comment">#网页爬取</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getText</span>(<span class="params">html</span>):</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0&#x27;</span>&#125;  </span><br><span class="line">    r = requests.get(html, headers = headers)</span><br><span class="line">    r.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    words = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> p1 <span class="keyword">in</span> soup.find_all(<span class="string">&quot;p&quot;</span>):</span><br><span class="line">        words = words + <span class="built_in">str</span>(p1.string)</span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wordClouds</span>(<span class="params">str1</span>):</span><br><span class="line">    mask = imageio.imread(<span class="string">&quot;/Users/mimc/Downloads/FireShot/五角星图片北京1.png&quot;</span>)</span><br><span class="line">   <span class="comment">#mask = imread(&quot;/Users/mimc/Downloads/FireShot/五角星图片北京.png&quot;)</span></span><br><span class="line">    ls = jieba.lcut(str1)<span class="comment">#分词</span></span><br><span class="line">    txt = <span class="string">&quot; &quot;</span>.join(ls)<span class="comment">#加空格</span></span><br><span class="line">    w = wordcloud.WordCloud(font_path=<span class="string">&quot;Hiragino Sans GB.ttc&quot;</span>,mask = mask,width=<span class="number">1000</span>,\</span><br><span class="line">                            height = <span class="number">700</span>,background_color = <span class="string">&quot;blue&quot;</span>)</span><br><span class="line">    w.generate(txt)<span class="comment">#生成词云</span></span><br><span class="line">    <span class="keyword">return</span> w</span><br><span class="line">   <span class="comment"># w.to_file(&quot;govwoldcloud19.png&quot;)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    html19 = <span class="string">&quot;http://www.xinhuanet.com/politics/2019-03/05/c_1124194454.htm&quot;</span></span><br><span class="line">    html18 = <span class="string">&quot;http://www.xinhuanet.com/politics/2018lh/2018-03/22/c_1122575588.htm&quot;</span></span><br><span class="line">    words19 = getText(html19)</span><br><span class="line">    words18 = getText(html18)</span><br><span class="line">    wordClouds(words18).to_file(<span class="string">&quot;/Users/mimc/Downloads/FireShot/govwoldcloud18.png&quot;</span>)</span><br><span class="line">    wordClouds(words19).to_file(<span class="string">&quot;/Users/mimc/Downloads/FireShot/govwoldcloud19.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"><span class="comment">#html19 = &quot;http://www.xinhuanet.com/politics/2019-03/05/c_1124194454.htm&quot;</span></span><br><span class="line"><span class="comment">#html18 = &quot;http://www.xinhuanet.com/politics/2018lh/2018-03/22/c_1122575588.htm&quot;</span></span><br><span class="line"><span class="comment">#words19 = getText(html19)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取txt文件</span></span><br><span class="line">words20=<span class="string">&#x27;/Users/mimc/Downloads/FireShot/生态环保大数据专题报告2020年第一季度0408-2.txt&#x27;</span></span><br><span class="line">f=<span class="built_in">open</span>(words20,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">t=f.read()<span class="comment">#将文件转换为长字符串</span></span><br><span class="line">f.close()</span><br><span class="line">wordClouds(t).to_file(<span class="string">&quot;/Users/mimc/Downloads/FireShot/govwoldcloud22.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>3、数据处理过程</p><p>数据的基本处理</p><p>数据的提取</p><p>数据的初步清洗</p><p>数据的排序</p><p>数据的字符处理</p><p>数据的过滤</p><p>数据的分组</p><p>数据的透视表</p><h2 id="1-数据的基本处理"><a href="#1-数据的基本处理" class="headerlink" title="1.数据的基本处理"></a><strong>1.数据的基本处理</strong></h2><p>1). 查看数据的维度</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><p>2).查看数据的基本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()<span class="comment">#查看数据集整体每个字段的数据类型</span></span><br></pre></td></tr></table></figure><p>3).查看数据集的空值，或者说是缺失值</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.describe()#或是整体数据的描述性统计</span><br></pre></td></tr></table></figure><p>4).查看唯一值</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&#x27;Pclass&#x27;].unique()#船舱字段里的唯一值</span><br></pre></td></tr></table></figure><p>5).查看数据集的前n行，后n行，不添加参数时为默认5</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head()</span><br><span class="line">df.tail()</span><br></pre></td></tr></table></figure><h2 id="2-数据的提取"><a href="#2-数据的提取" class="headerlink" title="2.数据的提取"></a><strong>2.数据的提取</strong></h2><p>6).按照索引的值进行提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#df3 为已经排序好的数据框</span></span><br><span class="line">df3.loc[<span class="number">0</span>] <span class="comment">#提取索引值为0的那一行数据</span></span><br></pre></td></tr></table></figure><p>7).按照索引的位置进行提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>8).取部分行和列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.iloc[<span class="number">2</span>:<span class="number">5</span>,:<span class="number">5</span>] <span class="comment">#先行后列，这里取的是 第二、三、四行和第五列</span></span><br></pre></td></tr></table></figure><p>9).按照条件提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[(df[<span class="string">&#x27;Pclass&#x27;</span>]&lt;=<span class="number">2</span>)&amp;(df[<span class="string">&#x27;Sex&#x27;</span>]==<span class="string">&#x27;female&#x27;</span>)]</span><br><span class="line"><span class="comment">#这里是提取仓位小于2的，并且性别为女性的数据</span></span><br></pre></td></tr></table></figure><h2 id="3-数据的清洗"><a href="#3-数据的清洗" class="headerlink" title="3.数据的清洗"></a><strong>3.数据的清洗</strong></h2><p>10).处理空值,用dropna删除空值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(how=<span class="string">&#x27;any&#x27;</span>)<span class="comment">#发现Age中的空值会全部删掉</span></span><br><span class="line">df.fillna(value = <span class="number">0</span>)<span class="comment">#用数据0来填充空值</span></span><br><span class="line">df[<span class="string">&#x27;Age&#x27;</span>].fillna(df[<span class="string">&#x27;Age&#x27;</span>].mean())<span class="comment">#用数据集的age字段平均值来填充age字段的空值</span></span><br></pre></td></tr></table></figure><p>11).对字符的处理，比如大小写的转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.upper).head(<span class="number">3</span>)<span class="comment">#记得要重新赋值</span></span><br></pre></td></tr></table></figure><p><strong>用map对序列可以进行转换处理</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Pclass&#x27;</span>] = df[<span class="string">&#x27;Pclass&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="number">1</span>:<span class="string">&#x27;一等舱&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;二等舱&#x27;</span>,<span class="number">3</span>:<span class="string">&#x27;三等舱&#x27;</span>&#125;)</span><br><span class="line">df.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>13).对数据集中的数据格式的改变</p><p>用dtypes可以查看数据的格式，对于的转换可以用astype来转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br><span class="line">df[<span class="string">&#x27;Fare&#x27;</span>].astype(<span class="string">&#x27;int&#x27;</span>).head(<span class="number">3</span>) <span class="comment">#把原来的float64-&gt;int</span></span><br></pre></td></tr></table></figure><p>14).更改列的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">&#x27;Survived&#x27;</span>:<span class="string">&#x27;是否获救&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>15).去掉重复值</p><p>通过drop_duplicates可以快速的去掉重复值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Embarked&#x27;</span>].drop_duplicates()</span><br></pre></td></tr></table></figure><h2 id="4-数据的排序"><a href="#4-数据的排序" class="headerlink" title="4.数据的排序"></a><strong>4.数据的排序</strong></h2><p>17).按照字段的值进行降序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.sort_values(by=<span class="string">&#x27;Age&#x27;</span>,ascending=<span class="literal">False</span>).head(<span class="number">3</span>)<span class="comment">#by参数可以通过列表传递，ascending 若为False 为降序</span></span><br></pre></td></tr></table></figure><p>8).按照index来排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df3.sort_index().head(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="5-数据的字符处理"><a href="#5-数据的字符处理" class="headerlink" title="5.数据的字符处理"></a><strong>5.数据的字符处理</strong></h2><p>19).对列的字符进行替换</p><p>船票比如A&#x2F;5 21171 有两部分组成，一部分是英文字符，一部分是纯数字，如果我们只想保留数字部分，我们直接用str字符串进行处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;Ticket&#x27;</span>] = df[<span class="string">&#x27;Ticket&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;[^\d+]&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">df.head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="6-数据集的过滤"><a href="#6-数据集的过滤" class="headerlink" title="6.数据集的过滤"></a><strong>6.数据集的过滤</strong></h2><p>20).用反转符号过滤 ~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#提取性别是男的数据</span></span><br><span class="line">df[~(df[<span class="string">&#x27;Sex&#x27;</span>]==<span class="string">&#x27;female&#x27;</span>)].head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>21).用query函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.query(<span class="string">&quot;Sex == &#x27;female&#x27;&quot;</span>).head(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="7-数据分类"><a href="#7-数据分类" class="headerlink" title="7.数据分类"></a><strong>7.数据分类</strong></h2><p>22).用where函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的字段 ‘是否成年’ </span></span><br><span class="line">df[<span class="string">&#x27;Adult_or_not&#x27;</span>] = np.where(df[<span class="string">&#x27;Age&#x27;</span>]&gt;= <span class="number">18</span>,<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line">df.sample(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>23).用万能的apply函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#apply可以处理比较复杂的逻辑，比如我们把年龄划分为几个阶段，小孩，青年，成人，老人。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_age</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">if</span> age&gt;<span class="number">0</span> <span class="keyword">and</span> age&lt;=<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;child&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> age&lt;=<span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;teenager&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> age&lt;=<span class="number">50</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;adult&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;older&#x27;</span></span><br><span class="line">    </span><br><span class="line">df[<span class="string">&#x27;age_classfication&#x27;</span>] = df[<span class="string">&#x27;Age&#x27;</span>].apply(convert_age)</span><br><span class="line">df.sample(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="8-数据的切片和透视表"><a href="#8-数据的切片和透视表" class="headerlink" title="8.数据的切片和透视表"></a><strong>8.数据的切片和透视表</strong></h2><p>24).用分组函数 groupby</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;Sex&#x27;</span>)[<span class="string">&#x27;Survived&#x27;</span>].count()<span class="comment">#对性别分组统计被救的人数</span></span><br></pre></td></tr></table></figure><p>25).对数据进行轴切片分析</p><p>是非获救和船舱等级这个两个轴进行深入切片分析，这里pandas给我们提供了非常方便的agg函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.groupby([<span class="string">&#x27;Survived&#x27;</span>,<span class="string">&#x27;Pclass&#x27;</span>])[<span class="string">&#x27;Age&#x27;</span>].agg([<span class="string">&#x27;size&#x27;</span>,<span class="string">&#x27;max&#x27;</span>,<span class="string">&#x27;min&#x27;</span>,<span class="string">&#x27;mean&#x27;</span>])</span><br><span class="line"><span class="comment">#来源：https://zhuanlan.zhihu.com/p/37763055</span></span><br></pre></td></tr></table></figure><p>26).数据透视表</p><p>根据一个或者多个键对数据进行聚合,我们用透视表也能做出类似上面的功能,比groupby还要强大.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index=[<span class="string">&#x27;Survived&#x27;</span>,<span class="string">&#x27;Pclass&#x27;</span>],columns = <span class="string">&#x27;Sex&#x27;</span>,values=<span class="string">&#x27;Age&#x27;</span>,aggfunc = &#123;<span class="string">&#x27;Age&#x27;</span>:[np.mean,<span class="built_in">min</span>,<span class="built_in">max</span>]&#125;)</span><br><span class="line"><span class="comment">#来源：https://zhuanlan.zhihu.com/p/37763055</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.unstack`操作, 这会让你得到一个`DateFrame</span><br><span class="line">dt_om.groupby([<span class="string">&#x27;国家&#x27;</span>,<span class="string">&#x27;year&#x27;</span>]).AQI.mean().unstack().plot.line(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h3 id="9颜色选择："><a href="#9颜色选择：" class="headerlink" title="9颜色选择："></a>9颜色选择：</h3><p><a href="https://www.cnblogs.com/darkknightzh/p/6117528.html">https://www.cnblogs.com/darkknightzh/p/6117528.html</a></p><p><a href="https://stackoverflow.com/questions/8931268/using-colormaps-to-set-color-of-line-in-matplotlib">https://stackoverflow.com/questions/8931268/using-colormaps-to-set-color-of-line-in-matplotlib</a></p><h3 id="10图表"><a href="#10图表" class="headerlink" title="10图表"></a>10图表</h3><p><a href="https://www.jiqizhixin.com/articles/2019-01-15-11">https://www.jiqizhixin.com/articles/2019-01-15-11</a></p><h3 id="11AQI转换"><a href="#11AQI转换" class="headerlink" title="11AQI转换"></a>11AQI转换</h3><p><a href="https://pypi.org/project/python-aqi/">https://pypi.org/project/python-aqi/</a></p><h3 id="12画图"><a href="#12画图" class="headerlink" title="12画图"></a>12画图</h3><h2 id="cufflinks"><a href="#cufflinks" class="headerlink" title="cufflinks"></a>cufflinks</h2><p><a href="https://blog.csdn.net/weixin_45716111/article/details/103092971?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-6&utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-6">https://blog.csdn.net/weixin_45716111/article/details/103092971?depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-6&amp;utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-6</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、主要城市中英文对应&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>签名函数</title>
    <link href="https://cyqmimc.github.io/2020/04/02/%E7%AD%BE%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>https://cyqmimc.github.io/2020/04/02/%E7%AD%BE%E5%90%8D%E5%87%BD%E6%95%B0/</id>
    <published>2020-04-02T06:05:50.000Z</published>
    <updated>2020-04-02T06:12:10.745Z</updated>
    
    <content type="html"><![CDATA[<p>功能：可以把白纸上的字抠出来，作电子签名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib3.connectionpool <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">r&#x27;C:/Users/lenovo/PycharmProjects/helloworld/pic&#x27;</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;C:/Users/lenovo/PycharmProjects/helloworld/pic/&#x27;</span>+filename)</span><br><span class="line">    img = img.convert(<span class="string">&quot;RGBA&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;C:/Users/lenovo/PycharmProjects/helloworld/pic/&#x27;</span>+filename)</span><br><span class="line">    pixdata = img.load()</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> xrange(img.size[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(img.size[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x,y][<span class="number">0</span>]&gt;<span class="number">100</span> <span class="keyword">and</span> pixdata[x,y][<span class="number">1</span>]&gt;<span class="number">100</span> <span class="keyword">and</span> pixdata[x,y][<span class="number">2</span>]&gt;<span class="number">100</span> <span class="keyword">and</span> pixdata[x,y][<span class="number">3</span>]&gt;<span class="number">100</span>:</span><br><span class="line">                pixdata[x, y] = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    img.save(<span class="string">&quot;C:/Users/lenovo/PycharmProjects/helloworld/pngNew/&quot;</span>+filename, <span class="string">&quot;PNG&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;功能：可以把白纸上的字抠出来，作电子签名&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cyqmimc.github.io/2020/04/02/python_AQI-bj-41/python_AQI-bj-41/"/>
    <id>https://cyqmimc.github.io/2020/04/02/python_AQI-bj-41/python_AQI-bj-41/</id>
    <published>2020-04-02T05:16:40.000Z</published>
    <updated>2020-04-02T05:29:40.977Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> pylab</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime </span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">_rebuild()</span><br><span class="line"><span class="keyword">import</span> glob, os</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">sns.set_style()</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">excel_file = <span class="string">&#x27;/Users/mimc/PycharmProjects/bigdata_aqi/data/数据比较全的国家.xlsx&#x27;</span></span><br><span class="line">df = pd.read_excel(excel_file, sheet_name=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(df.head().values)</span></span><br><span class="line">test_data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values:  <span class="comment"># 获取行号的索引，并对其进行遍历：#根据i来获取每一行指定的数据 并利用to_dict转成字典</span></span><br><span class="line">    row_data = df.loc[i, [<span class="string">&#x27;xh&#x27;</span>, <span class="string">&#x27;国家&#x27;</span>, <span class="string">&#x27;country&#x27;</span>, <span class="string">&#x27;lx&#x27;</span>, <span class="string">&#x27;mc&#x27;</span>, <span class="string">&#x27;city&#x27;</span>]].to_dict()</span><br><span class="line">    test_data.append(row_data)</span><br><span class="line"><span class="comment">#df.country.value_counts().count()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 美国EPA标准转换为AQI</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">r&#x27;/Users/mimc/PycharmProjects/bigdata_aqi/data&#x27;</span></span><br><span class="line">file = glob.glob(os.path.join(path, <span class="string">&#x27;*.csv&#x27;</span>))</span><br><span class="line">dl = []</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> file:</span><br><span class="line">    data = pd.read_csv(f,skipinitialspace=<span class="literal">True</span>)</span><br><span class="line">    data[<span class="string">&#x27;mc&#x27;</span>] = f.rsplit(<span class="string">&#x27;/&#x27;</span>,<span class="number">1</span>)[-<span class="number">1</span>]</span><br><span class="line">    dl.append(data)</span><br><span class="line"></span><br><span class="line">dataset = pd.concat(dl,ignore_index=<span class="literal">False</span>) <span class="comment">#合并数据集</span></span><br><span class="line">dataset.head()</span><br><span class="line">dataset.shape</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%timeit</span></span><br><span class="line">dt = pd.merge(df,dataset,on=<span class="string">&#x27;mc&#x27;</span>,how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"><span class="comment">#dt[dt[&#x27;country&#x27;]==&#x27;Republic of Kenya&#x27;]</span></span><br><span class="line"></span><br><span class="line">dt[<span class="string">&#x27;AQI&#x27;</span>]=dt.<span class="built_in">max</span>(axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#时间数据格式需要进行转换，创建季节列；</span></span><br><span class="line">dt[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(dt[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="comment">#dt.info() #查看time列的数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取年和月进一步分析整体AQI情况</span></span><br><span class="line">times = dt[<span class="string">&#x27;date&#x27;</span>].shape[<span class="number">0</span>]</span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">    month = dt[<span class="string">&#x27;date&#x27;</span>][j].month</span><br><span class="line">    a.append(month)</span><br><span class="line">dt[<span class="string">&#x27;month&#x27;</span>] = a</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">    year = dt[<span class="string">&#x27;date&#x27;</span>][i].year</span><br><span class="line">    b.append(year)</span><br><span class="line">dt[<span class="string">&#x27;year&#x27;</span>] = b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据清洗</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.o3、primary_pollutant存在缺失值。o3使用所在城市平均值填充，</span></span><br><span class="line"><span class="comment"># primary_pollutant统计数据较混乱且与项目问题无关，删除此列；</span></span><br><span class="line"><span class="keyword">for</span> country <span class="keyword">in</span> dt.country.value_counts().index:</span><br><span class="line">    dt.loc[(dt[<span class="string">&#x27;country&#x27;</span>] == country) &amp; (dt[<span class="string">&#x27;o3&#x27;</span>].isnull()), <span class="string">&#x27;o3&#x27;</span>] = dt[dt[<span class="string">&#x27;country&#x27;</span>] == country][<span class="string">&#x27;o3&#x27;</span>].mean()</span><br><span class="line">    dt.loc[(dt[<span class="string">&#x27;country&#x27;</span>] == country) &amp; (dt[<span class="string">&#x27;pm25&#x27;</span>].isnull()), <span class="string">&#x27;pm25&#x27;</span>] = dt[dt[<span class="string">&#x27;country&#x27;</span>] == country][<span class="string">&#x27;pm25&#x27;</span>].mean()</span><br><span class="line">    dt.loc[(dt[<span class="string">&#x27;country&#x27;</span>] == country) &amp; (dt[<span class="string">&#x27;pm10&#x27;</span>].isnull()), <span class="string">&#x27;pm10&#x27;</span>] = dt[dt[<span class="string">&#x27;country&#x27;</span>] == country][<span class="string">&#x27;pm10&#x27;</span>].mean()</span><br><span class="line">    dt.loc[(dt[<span class="string">&#x27;country&#x27;</span>] == country) &amp; (dt[<span class="string">&#x27;no2&#x27;</span>].isnull()), <span class="string">&#x27;no2&#x27;</span>] = dt[dt[<span class="string">&#x27;country&#x27;</span>] == country][<span class="string">&#x27;no2&#x27;</span>].mean()</span><br><span class="line">    dt.loc[(dt[<span class="string">&#x27;country&#x27;</span>] == country) &amp; (dt[<span class="string">&#x27;so2&#x27;</span>].isnull()), <span class="string">&#x27;so2&#x27;</span>] = dt[dt[<span class="string">&#x27;country&#x27;</span>] == country][<span class="string">&#x27;so2&#x27;</span>].mean()</span><br><span class="line">    dt.loc[(dt[<span class="string">&#x27;country&#x27;</span>] == country) &amp; (dt[<span class="string">&#x27;co&#x27;</span>].isnull()), <span class="string">&#x27;co&#x27;</span>] = dt[dt[<span class="string">&#x27;country&#x27;</span>] == country][<span class="string">&#x27;co&#x27;</span>].mean()</span><br><span class="line"><span class="comment">#dt[&#x27;pm25&#x27;].isnull().sum()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dt.drop([<span class="string">&#x27;xh&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">dt.drop([<span class="string">&#x27;mc&#x27;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#dt.head() #查看调整后的表格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dt = dt.fillna(0)#NaN 替换为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dt.isnull().any()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#.isnull().sum()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#时间数据格式需要进行转换，创建季节列；</span></span><br><span class="line">dt[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(dt[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="comment">#dt.info() #查看time列的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据月份创建季节列</span></span><br><span class="line">seasons = &#123;<span class="number">12</span>: <span class="string">&#x27;Winter&#x27;</span>,</span><br><span class="line">           <span class="number">1</span>: <span class="string">&#x27;Winter&#x27;</span>,</span><br><span class="line">           <span class="number">2</span>: <span class="string">&#x27;Winter&#x27;</span>,</span><br><span class="line">           <span class="number">3</span>: <span class="string">&#x27;Spring&#x27;</span>,</span><br><span class="line">           <span class="number">4</span>: <span class="string">&#x27;Spring&#x27;</span>,</span><br><span class="line">           <span class="number">5</span>: <span class="string">&#x27;Spring&#x27;</span>,</span><br><span class="line">           <span class="number">6</span>: <span class="string">&#x27;Summer&#x27;</span>,</span><br><span class="line">           <span class="number">7</span>: <span class="string">&#x27;Summer&#x27;</span>,</span><br><span class="line">           <span class="number">8</span>: <span class="string">&#x27;Summer&#x27;</span>,</span><br><span class="line">           <span class="number">9</span>: <span class="string">&#x27;Autumn&#x27;</span>,</span><br><span class="line">           <span class="number">10</span>: <span class="string">&#x27;Autumn&#x27;</span>,</span><br><span class="line">           <span class="number">11</span>: <span class="string">&#x27;Autumn&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line">dt[<span class="string">&#x27;season&#x27;</span>] = dt[<span class="string">&#x27;date&#x27;</span>].apply(<span class="keyword">lambda</span> x : seasons [x.month])</span><br><span class="line"><span class="comment">#dt.head()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.创建空气质量等级列</span></span><br><span class="line">bin_edges = [<span class="number">0</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">1210</span>] <span class="comment"># 根据AQI的划分等级设置标签</span></span><br><span class="line">bin_names = [<span class="string">&#x27;优级&#x27;</span>, <span class="string">&#x27;良好&#x27;</span>, <span class="string">&#x27;轻度污染&#x27;</span>, <span class="string">&#x27;中度污染&#x27;</span>, <span class="string">&#x27;重度污染&#x27;</span>, <span class="string">&#x27;重污染&#x27;</span>]</span><br><span class="line">dt[<span class="string">&#x27;空气质量&#x27;</span>] = pd.cut(dt[<span class="string">&#x27;AQI&#x27;</span>], bin_edges, labels=bin_names)</span><br><span class="line"><span class="comment">#dt.head()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dt.shape</span></span><br><span class="line"><span class="comment">#dt[dt[&#x27;country&#x27;]==&#x27;Republic of Kenya&#x27;]</span></span><br><span class="line"></span><br><span class="line">dtf_year = dt[dt[<span class="string">&#x27;year&#x27;</span>].isin([<span class="string">&#x27;2020&#x27;</span>])]</span><br><span class="line">dtf_season = dtf_year[dtf_year[<span class="string">&#x27;month&#x27;</span>].isin([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])]</span><br><span class="line">dt_season = dt[dt[<span class="string">&#x27;month&#x27;</span>].isin([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>])]</span><br><span class="line"><span class="comment">#dtf_season</span></span><br><span class="line"><span class="comment">#dtf_season.describe()</span></span><br><span class="line"><span class="comment">#df.country.value_counts().count()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6.创建2020空气质量排名列（以AQI平均值为基础）；</span></span><br><span class="line"></span><br><span class="line">a = dtf_season.groupby(<span class="string">&#x27;国家&#x27;</span>).mean().AQI.sort_values().index</span><br><span class="line"><span class="comment">#c = dtf_season.groupby(&#x27;city&#x27;).mean().AQI.sort_values().index</span></span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, a.shape[<span class="number">0</span>]+<span class="number">1</span>):</span><br><span class="line">    b.append(_)</span><br><span class="line"></span><br><span class="line">pro_rank_dic = <span class="built_in">dict</span>(<span class="built_in">zip</span>(a,b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(dtf_season.groupby(<span class="string">&#x27;city&#x27;</span>).AQI.mean().sort_values().tail(<span class="number">20</span>)).plot.barh(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">plt.xlim(<span class="number">10</span>,<span class="number">160</span>)</span><br><span class="line"><span class="comment">#plt.style.use(&#x27;seaborn-whitegrid&#x27;)</span></span><br><span class="line">plt.title(<span class="string">&#x27;2020年空气质量最差城市排名&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;AQI&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;City&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.legend(<span class="string">&#x27;AQI&#x27;</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>, color=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_2_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(dt.groupby(<span class="string">&#x27;city&#x27;</span>).AQI.mean().sort_values().tail(<span class="number">20</span>)).plot.barh(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">plt.xlim(<span class="number">10</span>,<span class="number">160</span>)</span><br><span class="line">plt.style.use(<span class="string">&#x27;dark_background&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;(2014-2020)年空气质量最差城市排名&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;AQI&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;City&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.legend(<span class="string">&#x27;AQI&#x27;</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>, color=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_3_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">f, axes = plt.subplots(figsize=(<span class="number">20</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment">#sns.set(style=&quot;ticks&quot;)</span></span><br><span class="line">plt.title(<span class="string">&#x27;2020年全球第一季度空气质量走势&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;month&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sns.lineplot(x=<span class="string">&#x27;date&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dtf_season, ax=axes)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1218df2b0&gt;</code></pre><p><img src="/images/output_4_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">dt_bj_all = dt[dt[<span class="string">&#x27;city&#x27;</span>] == <span class="string">&#x27;beijing&#x27;</span>]</span><br><span class="line">dt_bj_pollutant = dt_bj_all[dt_bj_all[<span class="string">&#x27;AQI&#x27;</span>] &gt;= <span class="number">100</span>][[<span class="string">&#x27;AQI&#x27;</span>, <span class="string">&#x27;pm25&#x27;</span>, <span class="string">&#x27;pm10&#x27;</span>, <span class="string">&#x27;so2&#x27;</span>, <span class="string">&#x27;no2&#x27;</span>, <span class="string">&#x27;co&#x27;</span>, <span class="string">&#x27;o3&#x27;</span>]]</span><br><span class="line">dt_bj = dtf_season[dtf_season[<span class="string">&#x27;city&#x27;</span>] == <span class="string">&#x27;beijing&#x27;</span>]<span class="comment">#2020年 1,2,3月</span></span><br><span class="line">dt_bj_season_pollutant = dt_bj[dt_bj[<span class="string">&#x27;AQI&#x27;</span>] &gt;= <span class="number">100</span>][[<span class="string">&#x27;AQI&#x27;</span>, <span class="string">&#x27;pm25&#x27;</span>, <span class="string">&#x27;pm10&#x27;</span>, <span class="string">&#x27;so2&#x27;</span>, <span class="string">&#x27;no2&#x27;</span>, <span class="string">&#x27;co&#x27;</span>, <span class="string">&#x27;o3&#x27;</span>]]</span><br><span class="line"><span class="comment">#dt_fd_pollutant= dtf_season_fd[dtf_season_fd[&#x27;AQI&#x27;] &gt;= 100][[&#x27;AQI&#x27;, &#x27;pm25&#x27;, &#x27;pm10&#x27;, &#x27;so2&#x27;, &#x27;no2&#x27;, &#x27;co&#x27;, &#x27;o3&#x27;]]</span></span><br><span class="line">dt_bj_season = dt_season[dt_season[<span class="string">&#x27;city&#x27;</span>] == <span class="string">&#x27;beijing&#x27;</span>]<span class="comment">#2014-2020 1，2，3</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">sns.barplot(x=<span class="string">&#x27;month&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, hue=<span class="string">&#x27;year&#x27;</span>, data=dt_bj)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;month&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">50</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2020年北京第一季度空气质量1~3月对比&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show();</span><br></pre></td></tr></table></figure><p><img src="/images/output_5_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对数据进行排序</span></span><br><span class="line">dtf_season.sort_values(<span class="string">&#x27;date&#x27;</span>,inplace= <span class="literal">True</span>)</span><br><span class="line">dt_bj.sort_values(<span class="string">&#x27;date&#x27;</span>,inplace= <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><pre><code>/usr/local/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrameSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy  This is separate from the ipykernel package so we can avoid doing imports until</code></pre><h2 id="dt-bj-all-开始"><a href="#dt-bj-all-开始" class="headerlink" title="dt_bj_all 开始"></a>dt_bj_all 开始</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">fig,axes=plt.subplots(<span class="number">1</span>,<span class="number">6</span>,figsize=(<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;pm25&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes[<span class="number">0</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;pm10&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes[<span class="number">1</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;so2&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes[<span class="number">2</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;no2&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes[<span class="number">3</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;co&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes[<span class="number">4</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;o3&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes[<span class="number">5</span>]);</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sns.heatmap(dt_bj_pollutant.corr(), vmax=<span class="number">1</span>, square=<span class="literal">False</span>, annot=<span class="literal">True</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;（2014-2020）全年北京空气质量热点图&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(rotation=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/output_8_0.png" alt="png"></p><p><img src="/images/output_8_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(dt_bj_all.groupby(<span class="string">&#x27;season&#x27;</span>).AQI.mean().sort_values()).plot.barh(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;(2014-2020)北京不同季节空气质量情况&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;AQI&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;季节&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.xlim(<span class="number">50</span>)</span><br><span class="line">plt.legend(<span class="string">&#x27;AQI&#x27;</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">&#x27;:&#x27;</span>, color=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show();</span><br></pre></td></tr></table></figure><p><img src="/images/output_9_0.png" alt="png"></p><h3 id="dt-bj-season-pollutant-开始"><a href="#dt-bj-season-pollutant-开始" class="headerlink" title="dt_bj_season_pollutant 开始"></a>dt_bj_season_pollutant 开始</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dt_bj_all.groupby(<span class="string">&#x27;season&#x27;</span>).AQI.mean().sort_values()</span><br></pre></td></tr></table></figure><pre><code>seasonSummer    119.355072Autumn    129.729282Spring    137.972414Winter    139.968227Name: AQI, dtype: float64</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">fig,axes=plt.subplots(<span class="number">1</span>,<span class="number">6</span>,figsize=(<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;pm25&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_season,ax=axes[<span class="number">0</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;pm10&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_season,ax=axes[<span class="number">1</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;so2&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_season,ax=axes[<span class="number">2</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;no2&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_season,ax=axes[<span class="number">3</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;co&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_season,ax=axes[<span class="number">4</span>]);</span><br><span class="line">sns.regplot(x=<span class="string">&#x27;o3&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_season,ax=axes[<span class="number">5</span>]);</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sns.heatmap(dt_bj_season_pollutant.corr(), vmax=<span class="number">1</span>, square=<span class="literal">False</span>, annot=<span class="literal">True</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2014-2020第一季度北京空气质量热点图&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(rotation=<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/output_12_0.png" alt="png"></p><p><img src="/images/output_12_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dt_bj_season.groupby(<span class="string">&#x27;空气质量&#x27;</span>).date.count().plot.bar(figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">0</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;次数&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.yticks(rotation=<span class="number">1</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;空气质量&#x27;</span>,size=<span class="number">20</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;(2014-2020)年第一季度北京空气质量次数&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show();</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平均AQI为：%.f\n\n&#x27;</span> % (dt_bj_season.AQI.mean()), dt_bj_season.groupby(<span class="string">&#x27;空气质量&#x27;</span>).date.count())</span><br></pre></td></tr></table></figure><p><img src="/images/output_13_0.png" alt="png"></p><pre><code>平均AQI为：138 空气质量优级       75良好      166轻度污染    144中度污染    132重度污染     83重污染      28Name: date, dtype: int64</code></pre><h3 id="由线性关系图和热点图可知，发展中国家主要污染物为：pm2-5、pm10、co"><a href="#由线性关系图和热点图可知，发展中国家主要污染物为：pm2-5、pm10、co" class="headerlink" title="由线性关系图和热点图可知，发展中国家主要污染物为：pm2.5、pm10、co"></a>由线性关系图和热点图可知，发展中国家主要污染物为：pm2.5、pm10、co</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dtf_season[<span class="string">&#x27;AQI&#x27;</span>]=dtf_season[<span class="string">&#x27;AQI&#x27;</span>].clip(<span class="number">0</span>,<span class="number">300</span>)</span><br><span class="line">fz_dtf_season=dtf_season[dtf_season[<span class="string">&#x27;lx&#x27;</span>]==<span class="string">&#x27;发展国家&#x27;</span>]</span><br><span class="line">fd_dtf_season=dtf_season[dtf_season[<span class="string">&#x27;lx&#x27;</span>]==<span class="string">&#x27;发达国家&#x27;</span>]</span><br><span class="line"><span class="comment">#fd_AQI=fd_dtf_season.groupby(&#x27;date&#x27;).AQI.mean()</span></span><br><span class="line"><span class="comment">#fd_AQI</span></span><br></pre></td></tr></table></figure><h3 id="北京冬季AQI较高，空气质量较差，夏季AQI较低，空气质量较好。"><a href="#北京冬季AQI较高，空气质量较差，夏季AQI较低，空气质量较好。" class="headerlink" title="北京冬季AQI较高，空气质量较差，夏季AQI较低，空气质量较好。"></a>北京冬季AQI较高，空气质量较差，夏季AQI较低，空气质量较好。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df_fz=df[df.lx==<span class="string">&#x27;发展国家&#x27;</span>]</span><br><span class="line">df_fd=df[df.lx==<span class="string">&#x27;发达国家&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;2020年第一季度发展中国家主要城市空气质量走势&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df_fz.city.values:</span><br><span class="line">    <span class="comment">#sns.lineplot(x=&#x27;date&#x27;, y=&#x27;AQI&#x27;,data=fz_dtf_season[fz_dtf_season[&#x27;city&#x27;] == i])</span></span><br><span class="line">    plt.plot(fz_dtf_season[fz_dtf_season[<span class="string">&#x27;city&#x27;</span>] == i][<span class="string">&#x27;date&#x27;</span>],fz_dtf_season[fz_dtf_season[<span class="string">&#x27;city&#x27;</span>] == i][<span class="string">&#x27;AQI&#x27;</span>],markersize=<span class="number">10</span>,linewidth=<span class="number">3</span>,label=i)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_18_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;2020年第一季度发达国家主要城市空气质量走势&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df_fd.city.values:</span><br><span class="line">    <span class="comment">#sns.lineplot(x=&#x27;date&#x27;, y=&#x27;AQI&#x27;,data=fz_dtf_season[fz_dtf_season[&#x27;city&#x27;] == i])</span></span><br><span class="line">    plt.plot(fd_dtf_season[fd_dtf_season[<span class="string">&#x27;city&#x27;</span>] == i][<span class="string">&#x27;date&#x27;</span>],fd_dtf_season[fd_dtf_season[<span class="string">&#x27;city&#x27;</span>] == i][<span class="string">&#x27;AQI&#x27;</span>],markersize=<span class="number">10</span>,linewidth=<span class="number">3</span>,label=i)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_19_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;2020年第一季度全球主要城市空气质量走势力&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.city.values:</span><br><span class="line">    <span class="comment">#sns.lineplot(x=&#x27;date&#x27;, y=&#x27;AQI&#x27;,data=fz_dtf_season[fz_dtf_season[&#x27;city&#x27;] == i])</span></span><br><span class="line">    plt.plot(dtf_season[dtf_season[<span class="string">&#x27;city&#x27;</span>] == i][<span class="string">&#x27;date&#x27;</span>],dtf_season[dtf_season[<span class="string">&#x27;city&#x27;</span>] == i][<span class="string">&#x27;AQI&#x27;</span>],markersize=<span class="number">10</span>,linewidth=<span class="number">3</span>,label=i)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_20_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig,axes=plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;(2014-2020)年北京空气质量全年走势&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;MONTH&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>,size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sns.lineplot(x=<span class="string">&#x27;month&#x27;</span>, y=<span class="string">&#x27;AQI&#x27;</span>, data=dt_bj_all,ax=axes);</span><br></pre></td></tr></table></figure><p><img src="/images/output_21_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fd_dtf_season.groupby(&#x27;date&#x27;).AQI.mean().values</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;seaborn-whitegrid&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">font_format = &#123;<span class="string">&#x27;family&#x27;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>, <span class="string">&#x27;size&#x27;</span>:<span class="number">30</span>&#125;</span><br><span class="line">plt.title(<span class="string">&quot;2020年第一季度中国和发达国家空气质量对比&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">plt.plot(dt_bj.date, dt_bj.AQI,  markersize=<span class="number">13</span>, markerfacecolor=<span class="string">&#x27;#44cef6&#x27;</span>, linewidth=<span class="number">4</span>,label=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">plt.plot(fd_dtf_season.groupby(<span class="string">&#x27;date&#x27;</span>).AQI.mean().index,fd_dtf_season.groupby(<span class="string">&#x27;date&#x27;</span>).AQI.mean().values, markersize=<span class="number">13</span>, color=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">4</span>,label=<span class="string">&#x27;发达国家&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_23_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;seaborn-whitegrid&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">font_format = &#123;<span class="string">&#x27;family&#x27;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>, <span class="string">&#x27;size&#x27;</span>:<span class="number">30</span>&#125;</span><br><span class="line">plt.title(<span class="string">&quot;2020年第一季度中国和发展国家空气质量对比&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">plt.plot(dt_bj.date, dt_bj.AQI,  markersize=<span class="number">13</span>, markerfacecolor=<span class="string">&#x27;#44cef6&#x27;</span>, linewidth=<span class="number">4</span>,label=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">plt.plot(fz_dtf_season.groupby(<span class="string">&#x27;date&#x27;</span>).AQI.mean().index,fz_dtf_season.groupby(<span class="string">&#x27;date&#x27;</span>).AQI.mean().values, markersize=<span class="number">13</span>, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">4</span>,label=<span class="string">&#x27;发展国家&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_24_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dt_bj_season_2020=dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2020</span>]</span><br><span class="line">dt_bj_season_2020=dt_bj_season_2020.groupby(<span class="string">&#x27;month&#x27;</span>).AQI.mean()</span><br><span class="line">dt_bj_season_2019=dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2019</span>]</span><br><span class="line">dt_bj_season_2019=dt_bj_season_2019.groupby(<span class="string">&#x27;month&#x27;</span>).AQI.mean()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dt_bj_2020=dt_bj[dt_bj[&#x27;year&#x27;]==2020]</span></span><br><span class="line"></span><br><span class="line">a_year=[<span class="string">&#x27;2014&#x27;</span>,<span class="string">&#x27;2015&#x27;</span>,<span class="string">&#x27;2016&#x27;</span>,<span class="string">&#x27;2017&#x27;</span>,<span class="string">&#x27;2017&#x27;</span>,<span class="string">&#x27;2019&#x27;</span>,<span class="string">&#x27;2020&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dt_1=dt_bj_season[dt_bj_season[<span class="string">&#x27;month&#x27;</span>]==<span class="number">1</span>]    </span><br><span class="line">dt_month_year=dt_bj_season.groupby(<span class="string">&#x27;year&#x27;</span>).AQI.mean()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;seaborn-whitegrid&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">font_format = &#123;<span class="string">&#x27;family&#x27;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>, <span class="string">&#x27;size&#x27;</span>:<span class="number">30</span>&#125;</span><br><span class="line">plt.title(<span class="string">&quot;(2014-2020)年北京第一季度空气质量变化&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#for i in a_year:</span></span><br><span class="line"><span class="comment">#    plt.plot(range(len(dt_bj_season[dt_bj_season[&#x27;year&#x27;]==i])), dt_bj_season[dt_bj_season[&#x27;year&#x27;]==i].AQI, markersize=13, linewidth=4,label=i)</span></span><br><span class="line"><span class="comment">#plt.legend()</span></span><br><span class="line"><span class="comment">#plt.plot(range(len(dt_bj_season[dt_bj_season[&#x27;year&#x27;]==2019])), dt_bj_season[dt_bj_season[&#x27;year&#x27;]==2019].AQI, markersize=13, linewidth=4,label=2019)</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2014</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2014</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2014</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2015</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2015</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2015</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2016</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2016</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2016</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2017</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2017</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2017</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2018</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2018</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2018</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2019</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2019</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2019</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2020</span>])), dt_bj_season[dt_bj_season[<span class="string">&#x27;year&#x27;</span>]==<span class="number">2020</span>].AQI, markersize=<span class="number">13</span>, linewidth=<span class="number">4</span>,label=<span class="number">2020</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/output_28_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">plt.style.use(<span class="string">&#x27;seaborn-whitegrid&#x27;</span>)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class="line">plt.figure(num=<span class="number">1</span>,figsize=(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">font_format = &#123;<span class="string">&#x27;family&#x27;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>, <span class="string">&#x27;size&#x27;</span>:<span class="number">30</span>&#125;</span><br><span class="line">plt.title(<span class="string">&quot;(2014-2020)年北京第一季度空气质量变化&quot;</span>,size=<span class="number">30</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;date&#x27;</span>, font_format)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;AQI&#x27;</span>, font_format)</span><br><span class="line"><span class="comment"># 横纵坐标上的字体大小与类型(不是xlabel, 是xticks)</span></span><br><span class="line">plt.xticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line">plt.yticks(fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, size=<span class="number">30</span>)</span><br><span class="line"><span class="comment"># 整个图像与展示框的相对位置</span></span><br><span class="line">plt.subplots_adjust(left=<span class="number">0.19</span>,right=<span class="number">0.94</span>, bottom=<span class="number">0.13</span>)</span><br><span class="line"><span class="comment"># 调整上下左右四个边框的线宽为2</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#for i in a_year:</span></span><br><span class="line">plt.plot(dt_month_year.index, dt_month_year, <span class="string">&#x27;ko--&#x27;</span>,markersize=<span class="number">13</span>,color=<span class="string">&#x27;green&#x27;</span>,linewidth=<span class="number">4</span>,label=<span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/output_29_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
</feed>
